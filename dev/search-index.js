var N=null,E="",T="t",U="u",searchIndex={};
var R=["litstr","structure","tokenstream","from_index","usize","from_dimacs","to_dimacs","isize","varisat","varisat::checker","varisat::checker::CheckerError","varisat::checker::CheckedProofStep","clause","propagations","assumptions","Proof processor that generates an LRAT proof.","WriteLrat","delete_open","last_added_id","buffered_deletes","result","checkererror","process_step","checkedproofstep","Reads and adds a formula in DIMACS CNF format.","cnfformula","var_count","add_clause","vsids_decay","Multiplicative decay for the VSIDS decision heuristic.","clause_activity_decay","Multiplicative decay for clause activities.","reduce_locals_interval","Number of conflicts between local clause reductions.","reduce_mids_interval","Number of conflicts between mid clause reductions.","luby_restart_interval_scale","Scaling factor for luby sequence based restarts (number of…","solverconfigupdate","clause_count","varisat::dimacs","varisat::dimacs::ParserError","dimacsparser","parsererror","dimacsheader","ProofProcessorError","varisat::solver","varisat::solver::SolverError","__Nonexhaustive","add_formula","add_dimacs_cnf","solvererror","failed_core","proofprocessor","analyze_conflict","Learns a new clause by analyzing a conflict.","trailp","set_var_count","involved","clause_hashes","Binary clauses.","assignmentp","Update structures for a new variable count.","watchlistsp","foundconflict","Clause activity.","clausedbp","clauseallocp","varisat::clause","clausealloc","clauseref","clauseheader","implgraphp","tmpdatap","Database for long clauses.","garbage_size","delete_clause","count_by_tier","collect_garbage","header","redundant","activity","header_mut","Central solver data structure.","assignment","solverconfigp","vsidsp","The VSIDS branching heuristic.","The value to add on bumping.","inv_decay","The inverse of the decay factor.","rescale_limit","Rescale activities if any value exceeds this value.","set_decay","Change the decay factor.","Rescale all values to avoid an overflow.","make_available","incremental","Incremental solving.","Conflict","assumption_levels","Proof generation.","hash_bits","How many bits are used for storing clause hashes.","ProofFormat","Proof formats that can be generated during solving.","BinaryDrat","AddClause","varisat::proof","varisat::proof::ProofStep","DeleteClause","A (partial) assignment that satisfies all clauses and…","Assumptions","Change the active set of assumptions.","FailedAssumptions","propagation_hashes","clause_hash","solverstatep","proofstep","close_proof","Maps literals and hashes of clause steps between the…","write_step","write_literals","write_proof","proofformat","add_processor","Add a [`ProofProcessor`].","conflict","full_restart","incrementalp","lit_value","varisat::prop","binaryclausesp","The implication graph.","Watchlists to detect clauses that became unit.","Contains only valid data for indices of assigned variables.","Scheduling of processing and solving steps.","Remove satisfied clauses and false literals.","Miscellaneous solver state.","varisat::lit","clone_into","to_string","borrow_mut","part_ptr_mut","try_from","try_into","part_ptr","to_owned","type_id","varisat::cnf","varisat::config","varisat::analyze_conflict","varisat::binary","varisat::cdcl","varisat::clause::activity","varisat::clause::alloc","varisat::clause::db","varisat::clause::header","varisat::context","varisat::context::parts","varisat::decision::vsids","varisat::incremental","varisat::proof::map_step","varisat::proof::varisat","varisat::prop::assignment","varisat::prop::graph","varisat::prop::watch","varisat::schedule","varisat::schedule::luby","varisat::state","varisat::tmp","deleteclauseproof","default","clauseactivityp","watchlists","schedule","storeclauseresult","deleteclauseresult","satstate","ordering","assert_receiver_is_total_eq","partial_cmp","formatter","innerpart","serialize","deserialize","backtrace","ClauseLits","UnitClause","TraceItem","CheckerError","CheckedProofStep","StoreClauseResult","DeleteClauseResult","ProofProcessor","CnfFormula","SolverConfig","SolverConfigUpdate","DimacsHeader","DimacsParser","ParserError","SolverError","AnalyzeConflict","LevelAbstraction","BinaryClauses","FoundConflict","ClauseActivity","ClauseAlloc","ClauseRef","ClauseHeader","Incremental","EnqueueAssumption","DeleteClauseProof","ProofStep","Assignment","ImplGraph","Watchlists","LubySequence","SolverState","AnalyzeConflictP","AssignmentP","BinaryClausesP","ClauseActivityP","ClauseAllocP","ClauseDbP","ImplGraphP","IncrementalP","ScheduleP","SolverConfigP","SolverStateP","WatchlistsP"];
searchIndex["varisat"]={"doc":"Varisat is a [CDCL][cdcl] based SAT solver written in…","i":[[0,"lit",R[8],"Literals and variables.",N,N],[3,"Var",R[139],"A boolean variable.",N,N],[12,"index",E,E,0,N],[3,"Lit",E,"A boolean literal.",N,N],[12,"code",E,E,1,N],[6,"LitIdx",E,"The backing type used to represent literals and variables.",N,N],[17,"_IMPL_SERIALIZE_FOR_Var",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_Var",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_Lit",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_Lit",E,E,N,N],[11,R[5],E,"Creates a variable from a 1-based index as used in the…",0,[[[R[7]]],["var"]]],[11,R[3],E,"Creates a variable from a 0-based index.",0,[[[R[4]]],["var"]]],[11,R[6],E,"The 1-based index representing this variable in the DIMACS…",0,[[],[R[7]]]],[11,"index",E,"The 0-based index representing this variable.",0,[[],[R[4]]]],[11,"max_var",E,"The variable with largest index that is supported.",0,[[],["var"]]],[11,"max_count",E,"Largest number of variables supported.",0,[[],[R[4]]]],[11,"from_var",E,"Creates a literal from a `Var` and a `bool` that is `true`…",1,[[["var"],["bool"]],["lit"]]],[11,"positive",E,"Create a positive literal from a `Var`.",1,[[["var"]],["lit"]]],[11,"negative",E,"Create a negative literal from a `Var`.",1,[[["var"]],["lit"]]],[11,R[3],E,"Create a literal from a variable index and a `bool` that…",1,[[[R[4]],["bool"]],["lit"]]],[11,"from_code",E,"Create a literal with the given encoding.",1,[[[R[4]]],["lit"]]],[11,"from_litidx",E,E,1,[[["litidx"],["bool"]],["lit"]]],[11,R[5],E,"Creates a literal from an integer.",1,[[[R[7]]],["lit"]]],[11,R[6],E,"1-based Integer representation of the literal, opposite of…",1,[[],[R[7]]]],[11,"index",E,"0-based index of the literal's variable.",1,[[],[R[4]]]],[11,"var",E,"The literal's variable.",1,[[],["var"]]],[11,"is_negative",E,"Whether the literal is negative, i.e. a negated variable.",1,[[],["bool"]]],[11,"is_positive",E,"Whether the literal is positive, i.e. a non-negated…",1,[[],["bool"]]],[11,"code",E,"Two times the variable's index for positive literals and…",1,[[],[R[4]]]],[0,"checker",R[8],"Check unsatisfiability proofs.",N,N],[3,R[16],R[9],R[15],N,N],[12,"binary",E,E,2,N],[12,"target",E,E,2,N],[12,R[17],E,E,2,N],[12,R[18],E,E,2,N],[12,R[19],E,E,2,N],[3,R[187],E,"Literals of a clause, either inline or an index into a…",N,N],[12,"length",E,E,3,N],[12,"inline",E,E,3,N],[3,"Clause",E,"Literals and metadata for non-unit clauses.",N,N],[12,"id",E,"LRAT clause id.",4,N],[12,"ref_count",E,"How often the clause is present as irred., red. clause.",4,N],[12,"lits",E,"Clause's literals.",4,N],[3,R[188],E,"Known unit clauses and metadata.",N,N],[12,"id",E,E,5,N],[12,"value",E,E,5,N],[3,R[189],E,"Propagation of the RUP check.",N,N],[12,"id",E,E,6,N],[12,"edges",E,E,6,N],[12,"unused",E,E,6,N],[3,"Checker",E,"A checker for unsatisfiability proofs in the native…",N,N],[12,"step",E,"Current step number.",7,N],[12,"next_clause_id",E,"Next clause id to use.",7,N],[12,"literal_buffer",E,"Literal storage for clauses,",7,N],[12,R[75],E,"Number of literals in the buffer which are from deleted…",7,N],[12,"clauses",E,"Stores all known non-unit clauses indexed by their hash.",7,N],[12,"unit_clauses",E,"Stores known unit clauses and propagations during a clause…",7,N],[12,"trail",E,"Stores overwritten values in `unit_clauses` to undo…",7,N],[12,"unsat",E,"Whether unsatisfiability was proven.",7,N],[12,"ended",E,"Whether an end of proof step was checked.",7,N],[12,"trace",E,"Involved clauses during the last check.",7,N],[12,"trace_edges",E,"Edges of the trace implication graph.",7,N],[12,"trace_ids",E,"Just the ids of `trace`.",7,N],[12,"processors",E,"Registered proof processors.",7,N],[12,"unit_conflict",E,"This stores a conflict of input unit clauses.",7,N],[12,"tmp",E,"Temporary storage for literals.",7,N],[12,R[102],E,R[103],7,N],[12,"previous_irred_clause_id",E,"Last added irredundant clause id.",7,N],[12,"previous_irred_clause_lits",E,"Last added irredundant clause literals.",7,N],[12,R[14],E,"Current assumptions, used to check FailedAssumptions and…",7,N],[4,R[190],E,"Possible errors while checking a varisat proof.",N,N],[13,"ProofIncomplete",E,E,8,N],[12,"step",R[10],E,8,N],[13,"IoError",R[9],E,8,N],[12,"step",R[10],E,8,N],[12,"cause",E,E,8,N],[13,"ParseError",R[9],E,8,N],[12,"step",R[10],E,8,N],[12,"cause",E,E,8,N],[13,"CheckFailed",R[9],E,8,N],[12,"step",R[10],E,8,N],[12,"msg",E,E,8,N],[12,"debug_step",E,E,8,N],[13,R[45],R[9],E,8,N],[12,"cause",R[10],E,8,N],[13,R[48],R[9],E,8,N],[4,R[191],E,"A single step of a proof.",N,N],[13,R[107],E,"A clause of the input formula.",9,N],[12,"id",R[11],E,9,N],[12,R[12],E,E,9,N],[13,"DuplicatedClause",R[9],"A duplicated clause of the input formula.",9,N],[12,"id",R[11],E,9,N],[12,"same_as_id",E,E,9,N],[12,R[12],E,E,9,N],[13,"TautologicalClause",R[9],"A tautological clause of the input formula.",9,N],[12,"id",R[11],E,9,N],[12,R[12],E,E,9,N],[13,"AtClause",R[9],"Addition of an asymmetric tautology (AT).",9,N],[12,"id",R[11],E,9,N],[12,R[80],E,E,9,N],[12,R[12],E,E,9,N],[12,R[13],E,E,9,N],[13,R[110],R[9],"Deletion of a redundant clause.",9,N],[12,"id",R[11],E,9,N],[12,R[12],E,E,9,N],[13,"DeleteAtClause",R[9],"Deletion of a clause that is an asymmetric tautology w.r.t…",9,N],[12,"id",R[11],E,9,N],[12,"keep_as_redundant",E,E,9,N],[12,R[12],E,E,9,N],[12,R[13],E,E,9,N],[13,"MakeIrredundant",R[9],"Make a redundant clause irredundant.",9,N],[12,"id",R[11],E,9,N],[12,R[12],E,E,9,N],[13,"Model",R[9],R[111],9,N],[12,R[84],R[11],E,9,N],[13,R[112],R[9],R[113],9,N],[12,R[14],R[11],E,9,N],[13,R[114],R[9],"Subset of assumptions incompatible with the formula.",9,N],[12,R[52],R[11],E,9,N],[12,R[13],E,E,9,N],[4,"UnitId",R[9],"Identifies the origin of a unit clause.",N,N],[13,"Global",E,E,10,N],[13,"TracePos",E,E,10,N],[13,"InClause",E,E,10,N],[4,R[192],E,"Return type of [`Checker::store_clause`]",N,N],[13,"New",E,E,11,N],[13,"Duplicate",E,E,11,N],[13,"NewlyIrredundant",E,E,11,N],[4,R[193],E,"Return type of [`Checker::delete_clause`]",N,N],[13,"Unchanged",E,E,12,N],[13,"NewlyRedundant",E,E,12,N],[13,"Removed",E,E,12,N],[5,"is_subset",E,"Test whether a set of literals is a (strict) subset of…",N,[[["bool"]],["bool"]]],[5,"copy_canonical",E,"Sort literals, remove duplicates and check for tautologic…",N,[[["vec"]],["bool"]]],[0,"write_lrat",E,R[15],N,N],[3,R[16],"varisat::checker::write_lrat",R[15],N,N],[12,"binary",E,E,2,N],[12,"target",E,E,2,N],[12,R[17],E,E,2,N],[12,R[18],E,E,2,N],[12,R[19],E,E,2,N],[11,"new",R[9],"Create a lrat writing processor.",2,[[["bool"]],["writelrat"]]],[11,"flush",E,"Write out all steps processed so far.",2,[[["self"]],[["error"],[R[20],["error"]]]]],[11,"open_delete",E,"If necessary begin a batched delete step.",2,[[["self"]],[["error"],[R[20],["error"]]]]],[11,"close_delete",E,"If necessary end a batched delete step.",2,[[["self"]],[["error"],[R[20],["error"]]]]],[11,"write_delete_step",E,"Begin a batched delete step.",2,[[["self"]],[["error"],[R[20],["error"]]]]],[11,"write_add_step",E,"Begin a clause addition step.",2,[[["self"]],[["error"],[R[20],["error"]]]]],[11,"write_ids",E,"Write a list of clause ids.",2,[[["self"]],[["error"],[R[20],["error"]]]]],[11,"write_lits",E,"Write a list of literals.",2,[[["self"]],[["error"],[R[20],["error"]]]]],[11,"write_end",E,"End the current step.",2,[[["self"]],[["error"],[R[20],["error"]]]]],[11,"write_sep",E,"Write a separator.",2,[[["self"]],[["error"],[R[20],["error"]]]]],[17,"_DERIVE_failure_Fail_FOR_CheckerError",E,E,N,N],[17,"_DERIVE_failure_core_fmt_Display_FOR_CheckerError",E,E,N,N],[17,"INLINE_LITS",E,E,N,N],[8,R[194],E,"Implement to process proof steps.",N,N],[10,R[22],E,E,13,[[["self"],[R[23]]],[["error"],[R[20],["error"]]]]],[11,"check_failed",E,"Generate a CheckFailed error with an empty debug_step",8,[[["string"],["u64"]],[R[21]]]],[11,"new",E,"Create a new ClauseLits, storing them in the given buffer…",3,[[["vec"]],["clauselits"]]],[11,"slice",E,"Returns the literals as a slice given a storage buffer",3,[[["self"]]]],[11,"buffer_used",E,"Literals stored in the literal buffer",3,[[["self"]],[R[4]]]],[11,"new",E,"Create a new checker.",7,[[],["checker"]]],[11,R[49],E,"Add a formula to the checker.",7,[[["self"],[R[25]]],[[R[21]],[R[20],[R[21]]]]]],[11,R[27],E,"Adds a clause to the checker.",7,[[["self"]],[[R[21]],[R[20],[R[21]]]]]],[11,R[50],E,R[24],7,[[["self"]],[["error"],[R[20],["error"]]]]],[11,R[116],E,"Compute a clause hash of the current bit size",7,[[["self"]],["u64"]]],[11,R[130],E,"Value of a literal if known from unit clauses.",7,[[["self"],["lit"]],["option"]]],[11,"store_clause",E,"Adds a clause to the checker data structures.",7,[[["self"],["bool"]]]],[11,"store_unit_clause",E,"Adds a unit clause to the checker data structures.",7,[[["self"],["lit"]]]],[11,R[76],E,"Delete a clause from the current formula.",7,[[["self"],["bool"]],[[R[21]],[R[20],[R[21]]]]]],[11,R[78],E,"Perform a garbage collection if required",7,[[["self"]]]],[11,"rehash",E,"Recompute all clause hashes",7,[[["self"]]]],[11,"check_clause_with_hashes",E,"Check whether a clause is implied by clauses of the given…",7,[[["self"]],[[R[21]],[R[20],[R[21]]]]]],[11,"subsumed_by_previous_irred_clause",E,"Check whether a given clause is subsumed by the last added…",7,[[["self"]],["bool"]]],[11,"check_step",E,"Check a single proof step",7,[[["self"],[R[118]]],[[R[21]],[R[20],[R[21]]]]]],[11,"check_at_clause_step",E,"Check an AtClause step",7,[[["self"],["bool"]],[[R[21]],[R[20],[R[21]]]]]],[11,"check_delete_clause_step",E,"Check a DeleteClause step",7,[[["self"],[R[171]]],[[R[21]],[R[20],[R[21]]]]]],[11,"check_unit_clauses_step",E,"Check a UnitClauses step",7,[[["self"]],[[R[21]],[R[20],[R[21]]]]]],[11,"check_model_step",E,"Check a Model step",7,[[["self"]],[[R[21]],[R[20],[R[21]]]]]],[11,"check_failed_assumptions_step",E,"Check a FailedAssumptions step",7,[[["self"]],[[R[21]],[R[20],[R[21]]]]]],[11,R[22],E,"Invoke all proof processors for a CheckedProofStep",7,[[[R[23]]],[[R[21]],[R[20],[R[21]]]]]],[11,"check_proof",E,R[24],7,[[["self"]],[[R[21]],[R[20],[R[21]]]]]],[11,"process_unit_conflicts",E,"Process unit conflicts detected during clause loading.",7,[[["self"]],[[R[21]],[R[20],[R[21]]]]]],[11,R[125],E,R[126],7,[[["self"],[R[53]]]]],[0,"cnf",R[8],"CNF formulas.",N,N],[3,R[195],R[149],"A formula in conjunctive normal form (CNF).",N,N],[12,R[26],E,E,14,N],[12,"literals",E,E,14,N],[12,"clause_ranges",E,E,14,N],[11,"new",E,"Create an empty CNF formula.",14,[[],[R[25]]]],[11,R[26],E,"Number of variables in the formula.",14,[[["self"]],[R[4]]]],[11,R[57],E,"Increase the number of variables in the formula.",14,[[["self"],[R[4]]]]],[11,"len",E,"Number of clauses in the formula.",14,[[["self"]],[R[4]]]],[11,R[27],E,"Appends a clause to the formula.",14,[[["self"]]]],[11,"iter",E,"Iterator over all clauses.",14,[[["self"]]]],[0,"config",R[8],"Solver configuration.",N,N],[3,R[196],R[150],"Configurable parameters used during solving.",N,N],[12,R[28],E,R[29],15,N],[12,R[30],E,R[31],15,N],[12,R[32],E,R[33],15,N],[12,R[34],E,R[35],15,N],[12,R[36],E,R[37],15,N],[3,R[197],E,"Updates configuration values of [`SolverConfig`].",N,N],[12,R[28],E,R[29],16,N],[12,R[30],E,R[31],16,N],[12,R[32],E,R[33],16,N],[12,R[34],E,R[35],16,N],[12,R[36],E,R[37],16,N],[17,"_DERIVE_Default_FOR_SolverConfig",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_SolverConfigUpdate",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_SolverConfigUpdate",E,E,N,N],[11,"help",E,"Return a string describing all supported configuration…",15,[[],["str"]]],[11,"new",E,"Create an empty config update.",16,[[],[R[38]]]],[11,"apply",E,"Apply the configuration update.",16,[[["self"],["solverconfig"]],[["error"],[R[20],["error"]]]]],[11,"merge",E,"Merge two configuration updates.",16,[[["self"],[R[38]]]]],[0,"dimacs",R[8],"DIMACS CNF parsing and writing.",N,N],[3,R[198],R[40],"Variable and clause count present in a DIMACS CNF header.",N,N],[12,R[26],E,E,17,N],[12,R[39],E,E,17,N],[3,R[199],E,"Parser for DIMACS CNF files.",N,N],[12,"formula",E,E,18,N],[12,"partial_clause",E,E,18,N],[12,R[79],E,E,18,N],[12,"line_number",E,E,18,N],[12,R[39],E,E,18,N],[12,"partial_lit",E,E,18,N],[12,"negate_next_lit",E,E,18,N],[12,"in_lit",E,E,18,N],[12,"in_comment_or_header",E,E,18,N],[12,"in_header",E,E,18,N],[12,"start_of_line",E,E,18,N],[12,"error",E,E,18,N],[12,"header_line",E,E,18,N],[4,R[200],E,"Possible errors while parsing a DIMACS CNF formula.",N,N],[13,"UnexpectedInput",E,E,19,N],[12,"line",R[41],E,19,N],[12,"unexpected",E,E,19,N],[13,"LiteralTooLarge",R[40],E,19,N],[12,"line",R[41],E,19,N],[12,"index",E,E,19,N],[12,"final_digit",E,E,19,N],[13,"InvalidHeader",R[40],E,19,N],[12,"line",R[41],E,19,N],[12,R[79],E,E,19,N],[13,"UnterminatedClause",R[40],E,19,N],[12,"line",R[41],E,19,N],[13,"VarCount",R[40],E,19,N],[12,R[26],R[41],E,19,N],[12,"header_var_count",E,E,19,N],[13,"ClauseCount",R[40],E,19,N],[12,R[39],R[41],E,19,N],[12,"header_clause_count",E,E,19,N],[13,"PreviousError",R[40],E,19,N],[5,"write_dimacs_header",E,"Write a DIMACS CNF header.",N,[[[R[44]]],[R[20]]]],[5,"write_dimacs_clauses",E,"Write an iterator of clauses as headerless DIMACS CNF.",N,[[],[R[20]]]],[5,"write_dimacs",E,"Write a formula as DIMACS CNF.",N,[[[R[25]]],[R[20]]]],[17,"_DERIVE_failure_Fail_FOR_ParserError",E,E,N,N],[17,"_DERIVE_failure_core_fmt_Display_FOR_ParserError",E,E,N,N],[11,"new",E,"Create a new DIMACS CNF parser.",18,[[],[R[42]]]],[11,"parse",E,"Parse the given input and check the header if present.",18,[[],[["error"],[R[25]],[R[20],[R[25],"error"]]]]],[11,"parse_incremental",E,"Parse the given input incrementally and check the header…",18,[[],[["error"],[R[20],[R[42],"error"]],[R[42]]]]],[11,"parse_chunk",E,"Parse a chunk of input.",18,[[["self"]],[[R[43]],[R[20],[R[43]]]]]],[11,"eof",E,"Finish parsing the input.",18,[[["self"]],[[R[43]],[R[20],[R[43]]]]]],[11,"check_header",E,"Verifies the header information when present.",18,[[["self"]],[[R[43]],[R[20],[R[43]]]]]],[11,"take_formula",E,"Returns the subformula of everything parsed since the last…",18,[[["self"]],[R[25]]]],[11,R[79],E,"Return the DIMACS CNF header data if present.",18,[[["self"]],[[R[44]],["option",[R[44]]]]]],[11,R[39],E,"Number of clauses parsed.",18,[[["self"]],[R[4]]]],[11,R[26],E,"Number of variables in the parsed formula.",18,[[["self"]],[R[4]]]],[11,"finish_literal",E,E,18,[[["self"]]]],[11,"parse_header_line",E,E,18,[[["self"]],[[R[43]],[R[20],[R[43]]]]]],[11,"invalid_header",E,E,18,[[["self"],["string"]],[[R[43]],[R[20],[R[43]]]]]],[0,"solver",R[8],"Boolean satisfiability solver.",N,N],[3,"Solver",R[46],"A boolean satisfiability solver.",N,N],[12,"ctx",E,E,20,N],[4,R[104],E,R[105],N,N],[13,"Varisat",E,E,21,N],[13,"Drat",E,E,21,N],[13,R[106],E,E,21,N],[4,R[201],E,"Possible errors while solving a formula.",N,N],[13,"Interrupted",E,E,22,N],[13,R[45],E,E,22,N],[12,"cause",R[47],E,22,N],[13,"ProofIoError",R[46],E,22,N],[12,"cause",R[47],E,22,N],[13,R[48],R[46],E,22,N],[17,"_DERIVE_failure_Fail_FOR_SolverError",E,E,N,N],[17,"_DERIVE_failure_core_fmt_Display_FOR_SolverError",E,E,N,N],[11,"is_recoverable",E,"Whether a Solver instance can be used after producing such…",22,[[["self"]],["bool"]]],[11,"new",E,"Create a new solver.",20,[[],["solver"]]],[11,"config",E,"Change the solver configuration.",20,[[["self"],[R[38]]],[["error"],[R[20],["error"]]]]],[11,R[49],E,"Add a formula to the solver.",20,[[["self"],[R[25]]]]],[11,R[27],E,"Add a clause to the solver.",20,[[["self"]]]],[11,"ensure_var_count_from_slice",E,"Increases the variable count to handle all literals in the…",20,[[["self"]]]],[11,R[50],E,R[24],20,[[["self"]],[["error"],[R[20],["error"]]]]],[11,"solve",E,"Check the satisfiability of the current formula.",20,[[["self"]],[["bool"],[R[51]],[R[20],["bool",R[51]]]]]],[11,"check_for_solver_error",E,"Check for asynchronously generated errors.",20,[[["self"]],[[R[20],[R[51]]],[R[51]]]]],[11,"assume",E,"Assume given literals for future calls to solve.",20,[[["self"]]]],[11,"model",E,"Set of literals that satisfy the formula.",20,[[["self"]],[["option",["vec"]],["vec",["lit"]]]]],[11,R[52],E,"Subset of the assumptions that made the formula…",20,[[["self"]],["option"]]],[11,R[123],E,"Generate a proof of unsatisfiability during solving.",20,[[["self"],[R[124]]]]],[11,R[119],E,"Stop generating a proof of unsatisfiability.",20,[[["self"]],[[R[20],[R[51]]],[R[51]]]]],[11,"enable_self_checking",E,"Generate and check a proof on the fly.",20,[[["self"]]]],[11,"add_proof_processor",E,"Generate a proof and process it using a [`ProofProcessor`].",20,[[["self"],[R[53]]]]],[0,R[54],R[8],R[55],N,N],[3,R[202],R[151],"Temporaries for conflict analysis",N,N],[12,R[12],E,"This is the learned clause after analysis finishes.",23,N],[12,"current_level_count",E,"Number of literals in the current clause at the current…",23,N],[12,"var_flags",E,"Variables in the current clause.",23,N],[12,"to_clean",E,"Entries to clean in `var_flags`.",23,N],[12,R[58],E,"Clauses to bump.",23,N],[12,R[59],E,"Hashes of all involved clauses needed to proof the…",23,N],[12,"unordered_clause_hashes",E,"Clause hashes paired with the trail depth of the…",23,N],[12,"stack",E,"Stack for recursive minimization.",23,N],[3,R[203],E,"A Bloom filter of levels.",N,N],[12,"bits",E,E,24,N],[5,R[54],E,R[55],N,[[[R[56]],[R[127]],["const",[R[56],"const"]],["const",["proofp","const"]]],[R[4]]]],[5,"add_literal",E,"Add a literal to the current clause.",N,[[[R[56]],["lit"],["const",[R[56],"const"]],["const",[R[72],"mut"]]]]],[5,"minimize_clause",E,"Performs recursive clause minimization.",N,[[["const",[R[56],"const"]],[R[56]],["const",["proofp","const"]]]]],[11,R[57],E,R[62],23,[[["self"],[R[4]]]]],[11,R[12],E,"The learned clause.",23,[[["self"]]]],[11,R[58],E,"Long clauses involved in the conflict.",23,[[["self"]]]],[11,R[59],E,"Hashes of clauses involved in the proof of the learned…",23,[[["self"]]]],[11,"add",E,"Add a level to the Bloom filter.",24,[[["self"],[R[4]]]]],[11,"test",E,"Test whether a level could be in the Bloom filter.",24,[[["self"],[R[4]]],["bool"]]],[0,"binary",R[8],R[60],N,N],[3,R[204],R[152],R[60],N,N],[12,"by_lit",E,E,25,N],[12,"count",E,E,25,N],[5,"simplify_binary",E,"Remove binary clauses that have an assigned literal.",N,[[[R[61]],["const",[R[61],"mut"]],["mut",[R[117],"mut"]]]]],[11,R[57],E,R[62],25,[[["self"],[R[4]]]]],[11,"add_binary_clause",E,"Add a binary clause.",25,[[["self"]]]],[11,"implied",E,"Implications of a given literal",25,[[["self"],["lit"]]]],[11,"count",E,"Number of binary clauses.",25,[[["self"]],[R[4]]]],[0,"cdcl",R[8],"Conflict driven clause learning.",N,N],[4,R[205],R[153],"Return type of [`find_conflict`].",N,N],[13,R[99],E,E,26,N],[13,"Assumption",E,E,26,N],[5,"conflict_step",E,"Find a conflict, learn a clause and backtrack.",N,[[[R[63]],["mut",[R[63],"mut"]],["mut",[R[86],"mut"]]]]],[5,"find_conflict",E,"Find a conflict.",N,[[[R[63]],["mut",[R[86],"mut"]],["mut",[R[63],"mut"]]],[[R[20],[R[64]]],[R[64]]]]],[0,R[12],R[8],"Clause storage.",N,N],[3,"Clause",R[68],"A clause.",N,N],[12,"data",E,E,27,N],[0,R[81],E,R[65],N,N],[3,R[206],R[154],R[65],N,N],[12,"bump",E,R[88],28,N],[12,R[89],E,R[90],28,N],[5,R[91],E,R[92],N,[[],["f32"]]],[5,"bump_clause_activity",E,"Increase a clause's activity.",N,[[[R[66]],["mut",[R[67],"mut"]],["mut",[R[66],"mut"]],[R[70]]]]],[5,"rescale_clause_activities",E,R[95],N,[[["mut",[R[66],"mut"]],[R[66]],["mut",[R[67],"mut"]]]]],[5,"decay_clause_activities",E,"Decay the clause activities.",N,[[["mut",[R[66],"mut"]],[R[66]],["mut",[R[67],"mut"]]]]],[11,R[93],E,R[94],28,[[["self"],["f32"]]]],[0,"alloc",R[68],"Clause allocator.",N,N],[3,R[207],R[155],"Bump allocator for clause storage.",N,N],[12,"buffer",E,E,29,N],[3,R[208],E,"Compact reference to a clause.",N,N],[12,"offset",E,E,30,N],[6,"ClauseOffset",E,"Integer type used to store offsets into [`ClauseAlloc`]'s…",N,N],[11,"new",E,"Create an emtpy clause allocator.",29,[[],[R[69]]]],[11,"with_capacity",E,"Create a clause allocator with preallocated capacity.",29,[[[R[4]]],[R[69]]]],[11,R[27],E,"Allocate space for and add a new clause.",29,[[["self"],[R[71]]],[R[70]]]],[11,R[79],E,"Access the header of a clause.",29,[[[R[70]],["self"]],[R[71]]]],[11,R[82],E,"Mutate the header of a clause.",29,[[["self"],[R[70]]],[R[71]]]],[11,"header_unchecked",E,E,29,[[[R[70]],["self"]],[R[71]]]],[11,"header_unchecked_mut",E,"Mutate the header of a clause without bound checks.",29,[[["self"],[R[70]]],[R[71]]]],[11,R[12],E,"Access a clause.",29,[[[R[70]],["self"]],[R[12]]]],[11,"clause_mut",E,"Mutate a clause.",29,[[["self"],[R[70]]],[R[12]]]],[11,"lits_ptr_mut_unchecked",E,"Mutate the literals of a clause without bound checks.",29,[[["self"],[R[70]]]]],[11,"check_bounds",E,"Perform a manual bound check on a ClauseRef assuming a…",29,[[[R[70]],["self"],[R[4]]]]],[11,"clause_with_len_unchecked",E,E,29,[[[R[70]],["self"],[R[4]]],[R[12]]]],[11,"clause_with_len_unchecked_mut",E,E,29,[[["self"],[R[70]],[R[4]]],[R[12]]]],[11,"buffer_size",E,"Current buffer size in multiples of [`LitIdx`].",29,[[["self"]],[R[4]]]],[11,"max_offset",E,"The largest offset supported by the ClauseAlloc",30,[[],["u32"]]],[0,"assess",R[68],"Clause assessment.",N,N],[5,"assess_learned_clause","varisat::clause::assess","Assess the newly learned clause and generate a clause…",N,[[[R[72]],["const",[R[72],"mut"]],["mut",[R[73],"ref"]]],[R[71]]]],[5,"select_tier",E,"Compute the tier for a redundant clause with a given glue…",N,[[[R[4]]],["tier"]]],[5,"bump_clause",E,"Update stats for clauses involved in the conflict.",N,[[[R[72]],[R[70]],["const",[R[72],"mut"]],["mut",[R[73],"mut"]]]]],[0,"db",R[68],R[74],N,N],[3,"ClauseDb",R[156],R[74],N,N],[12,"clauses",E,"May contain deleted clauses, see above",31,N],[12,"by_tier",E,"May contain deleted and moved clauses, see above",31,N],[12,R[77],E,"These counts should always be up to date",31,N],[12,R[75],E,"Size of deleted but not collected clauses",31,N],[4,"Tier",E,"Partitions of the clause database.",N,N],[13,"Irred",E,E,32,N],[13,"Core",E,E,32,N],[13,"Mid",E,E,32,N],[13,"Local",E,E,32,N],[5,R[27],E,"Add a long clause to the database.",N,[[[R[71]],["mut",[R[63],"mut"]],["mut",[R[66],"mut"]],[R[63]]],[R[70]]]],[5,"set_clause_tier",E,"Change the tier of a long clause.",N,[[[R[66]],["mut",[R[66],"mut"]],[R[70]],["tier"],["mut",[R[67],"ref"]]]]],[5,R[76],E,"Delete a long clause from the database.",N,[[["mut",[R[63],"mut"]],["mut",[R[66],"mut"]],[R[63]],[R[70]]]]],[5,"try_delete_clause",E,"Delete a long clause from the database unless it is…",N,[[[R[61]],[R[70]],["const",[R[72],"mut"]],["const",[R[61],"const"]]],["bool"]]],[5,"clauses_iter",E,"Iterator over all long clauses.",N,[[["const"]]]],[5,"filter_clauses",E,"Iterate over all and remove some long clauses.",N,[[["mut",[R[63],"mut"]],["mut",[R[66],"mut"]],[R[63]],["f"]]]],[11,"count",E,"Total number of tiers.",32,[[],[R[4]]]],[11,R[3],E,"Cast an index into the corresponding tier.",32,[[[R[4]]],["tier"]]],[11,R[77],E,"The number of long clauses of a given tier.",31,[[["tier"],["self"]],[R[4]]]],[0,"gc",R[68],"Garbage collection of long clauses.",N,N],[5,R[78],"varisat::clause::gc","Perform a garbage collection of long clauses if necessary.",N,[[["mut",[R[63],"mut"]],[R[56]],["const",[R[56],"mut"]]]]],[5,"collect_garbage_now",E,"Unconditionally perform a garbage collection of long…",N,[[["mut",[R[63],"mut"]],[R[56]],["const",[R[56],"mut"]]]]],[5,"mark_asserting_clauses",E,"Mark asserting clauses to track them through GC.",N,[[[R[56]],["const",[R[56],"const"]],["const",[R[72],"mut"]]]]],[0,R[79],R[68],"Metadata stored in the header of each long clause.",N,N],[3,R[209],R[157],"Metadata for a clause.",N,N],[12,"data",E,E,33,N],[17,"HEADER_LEN",E,"Length of a [`ClauseHeader`] in multiples of [`LitIdx`]",N,N],[17,"TIER_WORD",E,E,N,N],[17,"TIER_OFFSET",E,E,N,N],[17,"TIER_MASK",E,E,N,N],[17,"DELETED_WORD",E,E,N,N],[17,"DELETED_OFFSET",E,E,N,N],[17,"MARK_WORD",E,E,N,N],[17,"MARK_OFFSET",E,E,N,N],[17,"GLUE_WORD",E,E,N,N],[17,"GLUE_OFFSET",E,E,N,N],[17,"GLUE_MASK",E,E,N,N],[17,"ACTIVE_WORD",E,E,N,N],[17,"ACTIVE_OFFSET",E,E,N,N],[17,"ACTIVITY_WORD",E,E,N,N],[11,"new",E,"Create a new clause header with default entries.",33,[[],[R[71]]]],[11,"len",E,"Length of the clause.",33,[[["self"]],[R[4]]]],[11,"set_len",E,"Set the length of the clause.",33,[[["self"],[R[4]]]]],[11,"deleted",E,"Whether the clause is marked as deleted.",33,[[["self"]],["bool"]]],[11,"set_deleted",E,"Mark the clause as deleted.",33,[[["self"],["bool"]]]],[11,"tier",E,"Current [`Tier`] of the clause.",33,[[["self"]],["tier"]]],[11,"set_tier",E,"Set the current [`Tier`] of the clause.",33,[[["self"],["tier"]]]],[11,R[80],E,"Whether the clause is redundant.",33,[[["self"]],["bool"]]],[11,"mark",E,"Whether the clause is marked.",33,[[["self"]],["bool"]]],[11,"set_mark",E,"Mark or unmark the clause.",33,[[["self"],["bool"]]]],[11,"active",E,"The clause's active flag",33,[[["self"]],["bool"]]],[11,"set_active",E,"Set or reset the clause's active flag.",33,[[["self"],["bool"]]]],[11,"glue",E,"The [glue][crate::glue] level.",33,[[["self"]],[R[4]]]],[11,"set_glue",E,"Update the [glue][crate::glue] level.",33,[[["self"],[R[4]]]]],[11,R[81],E,"Clause [activity][crate::clause::activity].",33,[[["self"]],["f32"]]],[11,"set_activity",E,"Update clause [activity][crate::clause::activity].",33,[[["self"],["f32"]]]],[0,"reduce",R[68],"Clause database reduction.",N,N],[5,"dedup_and_mark_by_tier","varisat::clause::reduce","Remove deleted and duplicate entries from the by_tier…",N,[[[R[66]],["mut",[R[66],"mut"]],["tier"],["mut",[R[67],"ref"]]]]],[5,"reduce_locals",E,"Reduce the number of local tier clauses by deleting half…",N,[[["const",[R[72],"const"]],[R[72]],["const",[R[61],"mut"]]]]],[5,"reduce_mids",E,"Reduce the number of mid tier clauses by moving inactive…",N,[[[R[66]],["mut",[R[66],"mut"]],["mut",[R[67],"ref"]]]]],[11,R[79],R[68],"The clause's header",27,[[["self"]],[R[71]]]],[11,R[82],E,"Mutable reference to the clause's header",27,[[["self"]],[R[71]]]],[11,"lits",E,"The clause's literals",27,[[["self"]]]],[11,"lits_mut",E,"Mutable slice of the clause's literals",27,[[["self"]]]],[0,"context",R[8],R[83],N,N],[3,"Context",R[158],R[83],N,N],[12,R[54],E,E,34,N],[12,R[84],E,E,34,N],[12,"binary_clauses",E,E,34,N],[12,"clause_activity",E,E,34,N],[12,"clause_alloc",E,E,34,N],[12,"clause_db",E,E,34,N],[12,"impl_graph",E,E,34,N],[12,R[97],E,E,34,N],[12,"proof",E,E,34,N],[12,R[175],E,E,34,N],[12,"solver_config",E,E,34,N],[12,"solver_state",E,E,34,N],[12,"tmp_data",E,E,34,N],[12,"trail",E,E,34,N],[12,"vsids",E,E,34,N],[12,R[174],E,E,34,N],[5,R[57],E,R[62],N,[[["mut",[R[63],"mut"]],[R[4]],[R[63]],["mut",[R[86],"mut"]]]]],[5,"ensure_var_count",E,"Increases the variable count to at least the given value.",N,[[["mut",[R[63],"mut"]],[R[4]],[R[63]],["mut",[R[86],"mut"]]]]],[5,"config_changed",E,"The solver configuration has changed.",N,[[["mut",[R[173],"mut"]],[R[38]],["const",[R[85],"mut"]],[R[85]]]]],[0,"parts",E,"Part declarations for the [`Context`] struct.",N,N],[3,R[219],R[159],E,N,N],[3,R[220],E,E,N,N],[3,R[221],E,E,N,N],[3,R[222],E,E,N,N],[3,R[223],E,E,N,N],[3,R[224],E,E,N,N],[3,R[225],E,E,N,N],[3,R[226],E,E,N,N],[3,"ProofP",E,E,N,N],[12,"phantom",E,E,35,N],[3,R[227],E,E,N,N],[3,R[228],E,E,N,N],[3,R[229],E,E,N,N],[3,"TmpDataP",E,E,N,N],[3,"TrailP",E,E,N,N],[3,"VsidsP",E,E,N,N],[3,R[230],E,E,N,N],[17,"ProofP",E,E,N,N],[0,"decision",R[8],"Decision heuristics.",N,N],[5,"make_decision","varisat::decision","Make a decision and enqueue it.",N,[[["mut",[R[56],"mut"]],["mut",[R[86],"mut"]],[R[86]]],["bool"]]],[5,R[96],E,"Make a variable available for decisions.",N,[[["ref",["context"]],[R[86]],["mut",[R[86],"ref"]],["var"]]]],[0,"vsids",E,R[87],N,N],[3,"Vsids",R[160],R[87],N,N],[12,R[81],E,"The activity of each variable.",36,N],[12,"heap",E,"A binary heap of the variables.",36,N],[12,"position",E,"The position in the binary heap for each variable.",36,N],[12,"bump",E,R[88],36,N],[12,R[89],E,R[90],36,N],[11,R[57],E,R[62],36,[[["self"],[R[4]]]]],[11,R[91],E,R[92],36,[[],["f32"]]],[11,R[93],E,R[94],36,[[["self"],["f32"]]]],[11,"bump",E,"Bump a variable by increasing its activity.",36,[[["self"],["var"]]]],[11,"decay",E,"Decay all variable activities.",36,[[["self"]]]],[11,"rescale",E,R[95],36,[[["self"]]]],[11,R[96],E,"Insert a variable into the heap if not already present.",36,[[["self"],["var"]]]],[11,"sift_up",E,"Move a variable closer to the root until the heap property…",36,[[["self"],[R[4]]]]],[11,"sift_down",E,"Move a variable away from the root until the heap property…",36,[[["self"],[R[4]]]]],[0,"glue",R[8],"Compute glue levels of clauses.",N,N],[5,"compute_glue","varisat::glue","Compute the glue level of a clause.",N,[[[R[72]],["const",[R[72],"mut"]],["mut",[R[73],"ref"]]],[R[4]]]],[0,R[97],R[8],R[98],N,N],[3,R[210],R[161],R[98],N,N],[12,R[14],E,E,37,N],[12,R[52],E,E,37,N],[12,R[100],E,E,37,N],[12,"failed_propagation_hashes",E,E,37,N],[4,R[211],E,"Return type of [`enqueue_assumption`].",N,N],[13,"Done",E,E,38,N],[13,"Enqueued",E,E,38,N],[13,R[99],E,E,38,N],[5,"set_assumptions",E,"Change the currently active assumptions.",N,[[[R[86]],["mut",[R[86],"mut"]],["mut",["proofp","mut"]]]]],[5,"enqueue_assumption",E,"Enqueue another assumption if possible.",N,[[["const",[R[67],"mut"]],["mut",[R[56],"mut"]],[R[67]]],["enqueueassumption"]]],[5,"analyze_assumption_conflict",E,"Analyze a conflicting set of assumptions.",N,[[["const",[R[72],"const"]],[R[56]],["lit"],["const",[R[56],"const"]]]]],[11,R[100],E,"Current number of decision levels used for assumptions.",37,[[["self"]],[R[4]]]],[11,R[128],E,"Resets assumption_levels to zero on a full restart.",37,[[["self"]]]],[11,R[52],E,"Subset of assumptions that made the formula unsatisfiable.",37,[[["self"]]]],[0,"load",R[8],"Loading a formula into the solver.",N,N],[5,"load_clause","varisat::load","Adds a clause to the current formula.",N,[[[R[63]],["mut",[R[86],"mut"]],["mut",[R[63],"mut"]]]]],[0,"proof",R[8],R[101],N,N],[3,"Proof",R[108],R[101],N,N],[12,"format",E,E,39,N],[12,"target",E,E,39,N],[12,"checker",E,E,39,N],[12,"map_step",E,E,39,N],[12,R[102],E,R[103],39,N],[12,R[39],E,"How many clauses are currently in the db.",39,N],[12,"initial_load_complete",E,"Whether we're finished with the initial loading of clauses.",39,N],[4,R[104],E,R[105],N,N],[13,"Varisat",E,E,21,N],[13,"Drat",E,E,21,N],[13,R[106],E,E,21,N],[4,R[212],E,"Justifications for a simple clause deletion.",N,N],[13,"Redundant",E,"The clause is known to be redundant.",40,N],[13,"Simplified",E,"The clause is irred and subsumed by the clause added in…",40,N],[13,"Satisfied",E,"The clause contains a true literal.",40,N],[4,R[213],E,"A single proof step.",N,N],[13,R[107],E,"Add a new input clause.",41,N],[12,R[12],R[109],E,41,N],[13,"AtClause",R[108],"Add a clause that is an asymmetric tautoligy (AT).",41,N],[12,R[80],R[109],E,41,N],[12,R[12],E,E,41,N],[12,R[115],E,E,41,N],[13,"UnitClauses",R[108],"Unit clauses found by top-level unit-propagation.",41,N],[13,R[110],E,"Delete a clause consisting of the given literals.",41,N],[12,R[12],R[109],E,41,N],[12,"proof",E,E,41,N],[13,"ChangeHashBits",R[108],"Change the number of clause hash bits used",41,N],[13,"Model",E,R[111],41,N],[13,R[112],E,R[113],41,N],[13,R[114],E,"A subset of the assumptions that make the formula unsat.",41,N],[12,R[52],R[109],E,41,N],[12,R[115],E,E,41,N],[13,"End",R[108],"Signals the end of a proof.",41,N],[5,"lit_hash",E,"Hash a single literal.",N,[[["lit"]],["u64"]]],[5,R[116],E,"A fast hash function for clauses (or other sets of…",N,[[],["u64"]]],[5,R[27],E,"Call when adding an external clause.",N,[[["mut",[R[117],"mut"]],[R[117]],["mut",["proofp","ref"]]]]],[5,"add_step",E,"Add a step to the proof.",N,[[["mut",[R[117],"mut"]],[R[118]],[R[117]],["mut",["proofp","ref"]]]]],[5,"write_varisat_step",E,"Write a step using our native format",N,[[["mut",[R[117],"mut"]],[R[118]],[R[117]],["mut",["proofp","ref"]]],[R[20]]]],[5,"flush_proof",E,"Flush buffers used for writing proof steps.",N,[[["mut",["proofp","ref"]],["mut",[R[117],"mut"]],[R[117]]]]],[5,R[119],E,"Stop writing proof steps.",N,[[["mut",["proofp","ref"]],["mut",[R[117],"mut"]],[R[117]]]]],[5,"solve_finished",E,"Called before solve returns to flush buffers and to…",N,[[["mut",["proofp","ref"]],["mut",[R[117],"mut"]],[R[117]]]]],[5,"handle_self_check_result",E,"Handle results of on the fly checking.",N,[[["mut",[R[117],"mut"]],[R[21]],[R[117]],["mut",["proofp","ref"]],[R[20],[R[21]]]]]],[5,"handle_io_errors",E,"Handle io errors during proof writing.",N,[[["mut",[R[117],"mut"]],[R[117]],["mut",["proofp","ref"]],[R[20]]]]],[0,"drat",E,E,N,N],[5,R[121],"varisat::proof::drat","Writes a proof step in DRAT format",N,[[[R[118]]],[R[20]]]],[5,"write_binary_step",E,"Writes a proof step in binary DRAT format",N,[[[R[118]]],[R[20]]]],[5,R[122],E,"Writes the literals of a clause for a step in a DRAT proof.",N,[[],[R[20]]]],[5,"write_binary_literals",E,"Writes the literals of a clause for a step in a binary…",N,[[],[R[20]]]],[0,"map_step",R[108],R[120],N,N],[3,"MapStep",R[162],R[120],N,N],[12,"lit_buf",E,E,42,N],[12,"hash_buf",E,E,42,N],[12,"unit_buf",E,E,42,N],[11,"map",E,E,42,[[["self"],[R[118]]],[R[118]]]],[0,R[8],R[108],E,N,N],[3,"Parser",R[163],E,N,N],[12,"lit_buf",E,E,43,N],[12,"hash_buf",E,E,43,N],[12,"unit_buf",E,E,43,N],[5,R[121],E,"Writes a proof step in the varisat format",N,[[[R[118]]],[R[20]]]],[5,R[122],E,"Writes a slice of literals for a varisat proof",N,[[],[R[20]]]],[5,"read_literals",E,"Read a slice of literals from a varisat proof",N,[[["vec"]],[["error"],[R[20],["error"]]]]],[5,"write_hashes",E,"Writes a slice of clause hashes for a varisat proof",N,[[],[R[20]]]],[5,"read_hashes",E,"Read a slice of clause hashes from a varisat proof",N,[[["vec"]],[["error"],[R[20],["error"]]]]],[5,"write_unit_clauses",E,"Writes a slice of unit clauses for a varisat proof",N,[[],[R[20]]]],[5,"read_unit_clauses",E,"Read a slice of unit clauses from a varisat proof",N,[[["vec"]],[["error"],[R[20],["error"]]]]],[17,"CODE_AT_CLAUSE_RED",E,E,N,N],[17,"CODE_AT_CLAUSE_IRRED",E,E,N,N],[17,"CODE_UNIT_CLAUSES",E,E,N,N],[17,"CODE_DELETE_CLAUSE_REDUNDANT",E,E,N,N],[17,"CODE_DELETE_CLAUSE_SIMPLIFIED",E,E,N,N],[17,"CODE_DELETE_CLAUSE_SATISFIED",E,E,N,N],[17,"CODE_CHANGE_HASH_BITS",E,E,N,N],[17,"CODE_MODEL",E,E,N,N],[17,"CODE_ADD_CLAUSE",E,E,N,N],[17,"CODE_ASSUMPTIONS",E,E,N,N],[17,"CODE_FAILED_ASSUMPTIONS",E,E,N,N],[17,"CODE_END",E,E,N,N],[11,"parse_step",E,E,43,[[["self"]],[["error"],[R[20],[R[118],"error"]],[R[118]]]]],[6,"ClauseHash",R[108],"Integer type used to store a hash of a clause.",N,N],[11,"clause_count_delta",E,"Number of added or removed clauses.",41,[[["self"]],[R[7]]]],[11,R[123],E,"Start writing proof steps to the given target with the…",39,[[["self"],[R[124]]]]],[11,"begin_checking",E,"Begin checking proof steps.",39,[[["self"]]]],[11,R[125],E,R[126],39,[[["self"],[R[53]]]]],[11,"is_active",E,"Whether proof generation is active.",39,[[["self"]],["bool"]]],[11,"native_format",E,"Are we emitting or checking our native format.",39,[[["self"]],["bool"]]],[11,"clause_hashes_required",E,"Whether clause hashes are required for steps that support…",39,[[["self"]],["bool"]]],[11,"prove_propagated_unit_clauses",E,"Whether unit clauses discovered through unit propagation…",39,[[["self"]],["bool"]]],[11,"models_in_proof",E,"Whether found models are included in the proof.",39,[[["self"]],["bool"]]],[0,"prop",R[8],"Unit propagation.",N,N],[5,"propagate",R[131],"Propagate enqueued assignments.",N,[[[R[66]],["const",[R[66],"const"]],["const",[R[132],"mut"]]],[[R[127]],[R[20],[R[127]]]]]],[0,R[84],E,"Partial assignment and backtracking.",N,N],[3,R[214],R[164],"Current partial assignment.",N,N],[12,R[84],E,E,44,N],[12,"last_value",E,E,44,N],[3,"Trail",E,"Decision and propagation history.",N,N],[12,"trail",E,"Stack of all propagated and all enqueued assignments",45,N],[12,"queue_head_pos",E,"Next assignment in trail to propagate",45,N],[12,"decisions",E,"Decision levels as trail indices.",45,N],[12,"units_removed",E,"Number of unit clauses removed from the trail.",45,N],[5,"fast_option_eq",E,"This compares two `Option<bool>` values as bytes.…",N,[[["option",["bool"]],["bool"]],["bool"]]],[5,"enqueue_assignment",E,"Enqueues the assignment of true to a literal.",N,[[["mut",[R[56],"mut"]],[R[56]],["mut",[R[72],"mut"]],["lit"],["reason"]]]],[5,"backtrack",E,"Undo all assignments in decision levels deeper than the…",N,[[["mut",[R[86],"mut"]],[R[86]],[R[4]],["mut",[R[56],"mut"]]]]],[5,R[128],E,"Undo all decisions and assumptions.",N,[[[R[86]],["mut",[R[86],"mut"]],["mut",[R[56],"mut"]]]]],[5,"restart",E,"Undo all decisions.",N,[[["mut",[R[86],"mut"]],[R[129]],["const",[R[129],"mut"]]]]],[11,R[57],E,R[62],44,[[["self"],[R[4]]]]],[11,R[84],E,"Current partial assignment as slice.",44,[[["self"]]]],[11,"var_value",E,"Value assigned to a variable.",44,[[["self"],["var"]],[["bool"],["option",["bool"]]]]],[11,"last_var_value",E,"Value last assigned to a variable.",44,[[["self"],["var"]],["bool"]]],[11,R[130],E,"Value assigned to a literal.",44,[[["self"],["lit"]],[["bool"],["option",["bool"]]]]],[11,"lit_is_true",E,E,44,[[["self"],["lit"]],["bool"]]],[11,"lit_is_false",E,E,44,[[["self"],["lit"]],["bool"]]],[11,"lit_is_unk",E,E,44,[[["self"],["lit"]],["bool"]]],[11,"assign_lit",E,E,44,[[["self"],["lit"]]]],[11,"unassign_var",E,E,44,[[["self"],["var"]]]],[11,"queue_head",E,"Return the next assigned literal to propagate.",45,[[["self"]],[["lit"],["option",["lit"]]]]],[11,"pop_queue",E,"Return the next assigned literal to propagate and remove…",45,[[["self"]],[["lit"],["option",["lit"]]]]],[11,"reset_queue",E,"Re-enqueue all assigned literals.",45,[[["self"]]]],[11,"trail",E,"Assigned literals in assignment order.",45,[[["self"]]]],[11,"clear",E,"Clear the trail.",45,[[["self"]]]],[11,"new_decision_level",E,"Start a new decision level.",45,[[["self"]]]],[11,"current_level",E,"Current decision level.",45,[[["self"]],[R[4]]]],[11,"top_level_assignment_count",E,"The number of assignments at level 0.",45,[[["self"]],[R[4]]]],[11,"fully_propagated",E,"Whether all assignments are processed.",45,[[["self"]],["bool"]]],[0,"binary",R[131],"Propagation of binary clauses.",N,N],[5,"propagate_binary","varisat::prop::binary","Propagate all literals implied by the given literal via…",N,[[["mut",[R[56],"mut"]],["const",[R[132],"mut"]],[R[132]],["lit"]],[[R[127]],[R[20],[R[127]]]]]],[0,"graph",R[131],R[133],N,N],[3,"ImplNode",R[165],"Node and incoming edges of the implication graph.",N,N],[12,"reason",E,E,46,N],[12,"level",E,E,46,N],[12,"depth",E,"Position in trail when assigned, `LitIdx::max_value()` is…",46,N],[3,R[215],E,R[133],N,N],[12,"nodes",E,R[135],47,N],[4,"Reason",E,"Assignments that caused a propagation.",N,N],[13,"Unit",E,E,48,N],[13,"Binary",E,E,48,N],[13,"Long",E,E,48,N],[4,R[99],E,"Propagation that resulted in a conflict.",N,N],[13,"Binary",E,E,49,N],[13,"Long",E,E,49,N],[11,"lits",E,"The literals that caused the propagation.",48,[[["const"],["self"]]]],[11,"is_unit",E,"True if a unit clause or assumption and not a propagation.",48,[[["self"]],["bool"]]],[11,"lits",E,"The literals that caused the conflict.",49,[[["const"],["self"]]]],[11,R[57],E,R[62],47,[[["self"],[R[4]]]]],[11,"reason",E,"Get the reason for an assigned variable.",47,[[["self"],["var"]],["reason"]]],[11,"level",E,"Get the decision level of an assigned variable.",47,[[["self"],["var"]],[R[4]]]],[11,"depth",E,"Get the trail depth of an assigned variable.",47,[[["self"],["var"]],[R[4]]]],[11,"update_reason",E,"Updates the reason for an assigned variable.",47,[[["self"],["var"],["reason"]]]],[11,"update_removed_unit",E,"Updates the reason and depth of a unit clause removed from…",47,[[["self"],["var"]]]],[11,"is_removed_unit",E,E,47,[[["self"],["var"]],["bool"]]],[0,"long",R[131],"Propagation of long clauses.",N,N],[5,"propagate_long","varisat::prop::long","Propagate all literals implied by long clauses watched by…",N,[[["lit"],["mut",[R[67],"mut"]],[R[67]],["mut",[R[63],"mut"]]],[[R[127]],[R[20],[R[127]]]]]],[0,"watch",R[131],R[134],N,N],[3,"Watch",R[166],"A watch on a long clause.",N,N],[12,"cref",E,"Clause which has the referring lit in position 0 or 1.",50,N],[12,"blocking",E,"A lit of the clause, different from the referring lit.",50,N],[3,R[216],E,R[134],N,N],[12,"watches",E,R[135],51,N],[12,"enabled",E,"Whether watchlists are present",51,N],[5,"enable_watchlists",E,"Enable and rebuild watchlists.",N,[[["const",[R[66],"const"]],[R[66]],["const",[R[67],"mut"]]]]],[11,R[57],E,R[62],51,[[["self"],[R[4]]]]],[11,"watch_clause",E,"Start watching a clause.",51,[[["self"],[R[70]]]]],[11,"watched_by_mut",E,"Return watches for a given literal.",51,[[["self"],["lit"]],["vec"]]],[11,"add_watch",E,"Make a literal watch a clause.",51,[[["self"],["lit"],["watch"]]]],[11,"enabled",E,"Are watchlists enabled.",51,[[["self"]],["bool"]]],[11,"disable",E,"Clear and disable watchlists.",51,[[["self"]]]],[0,R[175],R[8],R[136],N,N],[3,"Schedule",R[167],R[136],N,N],[12,"conflicts",E,E,52,N],[12,"next_restart",E,E,52,N],[12,"restarts",E,E,52,N],[12,"luby",E,E,52,N],[5,"schedule_step",E,"Perform one step of the schedule.",N,[[["mut",[R[63],"mut"]],["const",[R[85],"mut"]],[R[85]]],["bool"]]],[0,"luby",E,"The reluctant doubling Luby sequence.",N,N],[3,R[217],R[168],"Infinite iterator yielding the Luby sequence.",N,N],[12,U,E,E,53,N],[12,"v",E,E,53,N],[11,"advance",E,"Yields the next number of hte Luby sequence.",53,[[["self"]],["u64"]]],[0,"simplify",R[8],"Simplification using unit clauses.",N,N],[5,"prove_units","varisat::simplify",R[137],N,[[["const",[R[67],"const"]],[R[67]],["const",[R[61],"mut"]]],["bool"]]],[5,"resurrect_unit",E,"Put a removed unit back onto the trail.",N,[[[R[56]],["mut",[R[72],"mut"]],["mut",[R[56],"mut"]],["lit"]]]],[5,"simplify",E,R[137],N,[[[R[61]],["const",[R[61],"mut"]],["mut",[R[63],"mut"]]]]],[0,"state",R[8],R[138],N,N],[3,R[218],R[169],R[138],N,N],[12,"sat_state",E,E,54,N],[12,"formula_is_empty",E,E,54,N],[12,"solver_invoked",E,"Whether solve was called at least once.",54,N],[12,"state_is_invalid",E,E,54,N],[12,"solver_error",E,E,54,N],[4,"SatState",E,"Satisfiability state.",N,N],[13,"Unknown",E,E,55,N],[13,"Sat",E,E,55,N],[13,"Unsat",E,E,55,N],[13,"UnsatUnderAssumptions",E,E,55,N],[0,"tmp",R[8],"Temporary data.",N,N],[3,"TmpData",R[170],"Temporary data used by various parts of the solver.",N,N],[12,"lits",E,E,56,N],[12,"lits_2",E,E,56,N],[12,"flags",E,"A boolean for each literal.",56,N],[11,R[57],E,R[62],56,[[["self"],[R[4]]]]],[0,"vli_enc",R[8],"Variable length integer encoding.",N,N],[5,"write_u64","varisat::vli_enc","Write an encoded 64 bit number.",N,[[["u64"]],[["error"],[R[20],["error"]]]]],[5,"read_u64_fast",E,"Read an encoded 64 bit number, if at least 16 bytes…",N,[[]]],[5,"read_u64",E,"Read an encoded 64 bit number from a buffered reader.",N,[[],[["error"],[R[20],["u64","error"]],["u64"]]]],[11,R[147],R[139],E,0,[[["self"]],[T]]],[11,R[140],E,E,0,[[[T],["self"]]]],[11,R[141],E,E,0,[[["self"]],["string"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[144],E,E,0,[[[U]],[R[20]]]],[11,R[145],E,E,0,[[],[R[20]]]],[11,R[142],E,E,0,[[["self"]],[T]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[148],E,E,0,[[["self"]],["typeid"]]],[11,R[146],E,E,0,[[]]],[11,R[143],E,E,0,[[]]],[11,R[147],E,E,1,[[["self"]],[T]]],[11,R[140],E,E,1,[[[T],["self"]]]],[11,R[141],E,E,1,[[["self"]],["string"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[144],E,E,1,[[[U]],[R[20]]]],[11,R[145],E,E,1,[[],[R[20]]]],[11,R[142],E,E,1,[[["self"]],[T]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[148],E,E,1,[[["self"]],["typeid"]]],[11,R[146],E,E,1,[[]]],[11,R[143],E,E,1,[[]]],[11,"from",R[9],E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[144],E,E,2,[[[U]],[R[20]]]],[11,R[145],E,E,2,[[],[R[20]]]],[11,R[142],E,E,2,[[["self"]],[T]]],[11,"borrow",E,E,2,[[["self"]],[T]]],[11,R[148],E,E,2,[[["self"]],["typeid"]]],[11,R[146],E,E,2,[[]]],[11,R[143],E,E,2,[[]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[144],E,E,3,[[[U]],[R[20]]]],[11,R[145],E,E,3,[[],[R[20]]]],[11,R[142],E,E,3,[[["self"]],[T]]],[11,"borrow",E,E,3,[[["self"]],[T]]],[11,R[148],E,E,3,[[["self"]],["typeid"]]],[11,R[146],E,E,3,[[]]],[11,R[143],E,E,3,[[]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[144],E,E,4,[[[U]],[R[20]]]],[11,R[145],E,E,4,[[],[R[20]]]],[11,R[142],E,E,4,[[["self"]],[T]]],[11,"borrow",E,E,4,[[["self"]],[T]]],[11,R[148],E,E,4,[[["self"]],["typeid"]]],[11,R[146],E,E,4,[[]]],[11,R[143],E,E,4,[[]]],[11,R[147],E,E,5,[[["self"]],[T]]],[11,R[140],E,E,5,[[[T],["self"]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[144],E,E,5,[[[U]],[R[20]]]],[11,R[145],E,E,5,[[],[R[20]]]],[11,R[142],E,E,5,[[["self"]],[T]]],[11,"borrow",E,E,5,[[["self"]],[T]]],[11,R[148],E,E,5,[[["self"]],["typeid"]]],[11,R[146],E,E,5,[[]]],[11,R[143],E,E,5,[[]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[144],E,E,6,[[[U]],[R[20]]]],[11,R[145],E,E,6,[[],[R[20]]]],[11,R[142],E,E,6,[[["self"]],[T]]],[11,"borrow",E,E,6,[[["self"]],[T]]],[11,R[148],E,E,6,[[["self"]],["typeid"]]],[11,R[146],E,E,6,[[]]],[11,R[143],E,E,6,[[]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[144],E,E,7,[[[U]],[R[20]]]],[11,R[145],E,E,7,[[],[R[20]]]],[11,R[142],E,E,7,[[["self"]],[T]]],[11,"borrow",E,E,7,[[["self"]],[T]]],[11,R[148],E,E,7,[[["self"]],["typeid"]]],[11,R[146],E,E,7,[[]]],[11,R[143],E,E,7,[[]]],[11,R[141],E,E,8,[[["self"]],["string"]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[144],E,E,8,[[[U]],[R[20]]]],[11,R[145],E,E,8,[[],[R[20]]]],[11,R[142],E,E,8,[[["self"]],[T]]],[11,"borrow",E,E,8,[[["self"]],[T]]],[11,R[148],E,E,8,[[["self"]],["typeid"]]],[11,"as_fail",E,E,8,[[["self"]],["fail"]]],[11,R[146],E,E,8,[[]]],[11,R[143],E,E,8,[[]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[144],E,E,9,[[[U]],[R[20]]]],[11,R[145],E,E,9,[[],[R[20]]]],[11,R[142],E,E,9,[[["self"]],[T]]],[11,"borrow",E,E,9,[[["self"]],[T]]],[11,R[148],E,E,9,[[["self"]],["typeid"]]],[11,R[146],E,E,9,[[]]],[11,R[143],E,E,9,[[]]],[11,R[147],E,E,10,[[["self"]],[T]]],[11,R[140],E,E,10,[[[T],["self"]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[144],E,E,10,[[[U]],[R[20]]]],[11,R[145],E,E,10,[[],[R[20]]]],[11,R[142],E,E,10,[[["self"]],[T]]],[11,"borrow",E,E,10,[[["self"]],[T]]],[11,R[148],E,E,10,[[["self"]],["typeid"]]],[11,R[146],E,E,10,[[]]],[11,R[143],E,E,10,[[]]],[11,R[147],E,E,11,[[["self"]],[T]]],[11,R[140],E,E,11,[[[T],["self"]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[144],E,E,11,[[[U]],[R[20]]]],[11,R[145],E,E,11,[[],[R[20]]]],[11,R[142],E,E,11,[[["self"]],[T]]],[11,"borrow",E,E,11,[[["self"]],[T]]],[11,R[148],E,E,11,[[["self"]],["typeid"]]],[11,R[146],E,E,11,[[]]],[11,R[143],E,E,11,[[]]],[11,R[147],E,E,12,[[["self"]],[T]]],[11,R[140],E,E,12,[[[T],["self"]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[144],E,E,12,[[[U]],[R[20]]]],[11,R[145],E,E,12,[[],[R[20]]]],[11,R[142],E,E,12,[[["self"]],[T]]],[11,"borrow",E,E,12,[[["self"]],[T]]],[11,R[148],E,E,12,[[["self"]],["typeid"]]],[11,R[146],E,E,12,[[]]],[11,R[143],E,E,12,[[]]],[11,"from",R[149],E,14,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,R[144],E,E,14,[[[U]],[R[20]]]],[11,R[145],E,E,14,[[],[R[20]]]],[11,R[142],E,E,14,[[["self"]],[T]]],[11,"borrow",E,E,14,[[["self"]],[T]]],[11,R[148],E,E,14,[[["self"]],["typeid"]]],[11,R[146],E,E,14,[[]]],[11,R[143],E,E,14,[[]]],[11,"from",R[150],E,15,[[[T]],[T]]],[11,"into",E,E,15,[[],[U]]],[11,R[144],E,E,15,[[[U]],[R[20]]]],[11,R[145],E,E,15,[[],[R[20]]]],[11,R[142],E,E,15,[[["self"]],[T]]],[11,"borrow",E,E,15,[[["self"]],[T]]],[11,R[148],E,E,15,[[["self"]],["typeid"]]],[11,R[146],E,E,15,[[]]],[11,R[143],E,E,15,[[]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[],[U]]],[11,R[144],E,E,16,[[[U]],[R[20]]]],[11,R[145],E,E,16,[[],[R[20]]]],[11,R[142],E,E,16,[[["self"]],[T]]],[11,"borrow",E,E,16,[[["self"]],[T]]],[11,R[148],E,E,16,[[["self"]],["typeid"]]],[11,R[146],E,E,16,[[]]],[11,R[143],E,E,16,[[]]],[11,R[147],R[40],E,17,[[["self"]],[T]]],[11,R[140],E,E,17,[[[T],["self"]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[],[U]]],[11,R[144],E,E,17,[[[U]],[R[20]]]],[11,R[145],E,E,17,[[],[R[20]]]],[11,R[142],E,E,17,[[["self"]],[T]]],[11,"borrow",E,E,17,[[["self"]],[T]]],[11,R[148],E,E,17,[[["self"]],["typeid"]]],[11,R[146],E,E,17,[[]]],[11,R[143],E,E,17,[[]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[],[U]]],[11,R[144],E,E,18,[[[U]],[R[20]]]],[11,R[145],E,E,18,[[],[R[20]]]],[11,R[142],E,E,18,[[["self"]],[T]]],[11,"borrow",E,E,18,[[["self"]],[T]]],[11,R[148],E,E,18,[[["self"]],["typeid"]]],[11,R[146],E,E,18,[[]]],[11,R[143],E,E,18,[[]]],[11,R[141],E,E,19,[[["self"]],["string"]]],[11,"from",E,E,19,[[[T]],[T]]],[11,"into",E,E,19,[[],[U]]],[11,R[144],E,E,19,[[[U]],[R[20]]]],[11,R[145],E,E,19,[[],[R[20]]]],[11,R[142],E,E,19,[[["self"]],[T]]],[11,"borrow",E,E,19,[[["self"]],[T]]],[11,R[148],E,E,19,[[["self"]],["typeid"]]],[11,"as_fail",E,E,19,[[["self"]],["fail"]]],[11,R[146],E,E,19,[[]]],[11,R[143],E,E,19,[[]]],[11,"from",R[46],E,20,[[[T]],[T]]],[11,"into",E,E,20,[[],[U]]],[11,R[144],E,E,20,[[[U]],[R[20]]]],[11,R[145],E,E,20,[[],[R[20]]]],[11,R[142],E,E,20,[[["self"]],[T]]],[11,"borrow",E,E,20,[[["self"]],[T]]],[11,R[148],E,E,20,[[["self"]],["typeid"]]],[11,R[146],E,E,20,[[]]],[11,R[143],E,E,20,[[]]],[11,R[147],E,E,21,[[["self"]],[T]]],[11,R[140],E,E,21,[[[T],["self"]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,"into",E,E,21,[[],[U]]],[11,R[144],E,E,21,[[[U]],[R[20]]]],[11,R[145],E,E,21,[[],[R[20]]]],[11,R[142],E,E,21,[[["self"]],[T]]],[11,"borrow",E,E,21,[[["self"]],[T]]],[11,R[148],E,E,21,[[["self"]],["typeid"]]],[11,R[146],E,E,21,[[]]],[11,R[143],E,E,21,[[]]],[11,R[141],E,E,22,[[["self"]],["string"]]],[11,"from",E,E,22,[[[T]],[T]]],[11,"into",E,E,22,[[],[U]]],[11,R[144],E,E,22,[[[U]],[R[20]]]],[11,R[145],E,E,22,[[],[R[20]]]],[11,R[142],E,E,22,[[["self"]],[T]]],[11,"borrow",E,E,22,[[["self"]],[T]]],[11,R[148],E,E,22,[[["self"]],["typeid"]]],[11,"as_fail",E,E,22,[[["self"]],["fail"]]],[11,R[146],E,E,22,[[]]],[11,R[143],E,E,22,[[]]],[11,"from",R[151],E,23,[[[T]],[T]]],[11,"into",E,E,23,[[],[U]]],[11,R[144],E,E,23,[[[U]],[R[20]]]],[11,R[145],E,E,23,[[],[R[20]]]],[11,R[142],E,E,23,[[["self"]],[T]]],[11,"borrow",E,E,23,[[["self"]],[T]]],[11,R[148],E,E,23,[[["self"]],["typeid"]]],[11,R[146],E,E,23,[[]]],[11,R[143],E,E,23,[[]]],[11,"from",E,E,24,[[[T]],[T]]],[11,"into",E,E,24,[[],[U]]],[11,R[144],E,E,24,[[[U]],[R[20]]]],[11,R[145],E,E,24,[[],[R[20]]]],[11,R[142],E,E,24,[[["self"]],[T]]],[11,"borrow",E,E,24,[[["self"]],[T]]],[11,R[148],E,E,24,[[["self"]],["typeid"]]],[11,R[146],E,E,24,[[]]],[11,R[143],E,E,24,[[]]],[11,"from",R[152],E,25,[[[T]],[T]]],[11,"into",E,E,25,[[],[U]]],[11,R[144],E,E,25,[[[U]],[R[20]]]],[11,R[145],E,E,25,[[],[R[20]]]],[11,R[142],E,E,25,[[["self"]],[T]]],[11,"borrow",E,E,25,[[["self"]],[T]]],[11,R[148],E,E,25,[[["self"]],["typeid"]]],[11,R[146],E,E,25,[[]]],[11,R[143],E,E,25,[[]]],[11,"from",R[153],E,26,[[[T]],[T]]],[11,"into",E,E,26,[[],[U]]],[11,R[144],E,E,26,[[[U]],[R[20]]]],[11,R[145],E,E,26,[[],[R[20]]]],[11,R[142],E,E,26,[[["self"]],[T]]],[11,"borrow",E,E,26,[[["self"]],[T]]],[11,R[148],E,E,26,[[["self"]],["typeid"]]],[11,R[146],E,E,26,[[]]],[11,R[143],E,E,26,[[]]],[11,R[142],R[68],E,27,[[["self"]],[T]]],[11,"borrow",E,E,27,[[["self"]],[T]]],[11,R[148],E,E,27,[[["self"]],["typeid"]]],[11,R[146],E,E,27,[[]]],[11,R[143],E,E,27,[[]]],[11,"from",R[154],E,28,[[[T]],[T]]],[11,"into",E,E,28,[[],[U]]],[11,R[144],E,E,28,[[[U]],[R[20]]]],[11,R[145],E,E,28,[[],[R[20]]]],[11,R[142],E,E,28,[[["self"]],[T]]],[11,"borrow",E,E,28,[[["self"]],[T]]],[11,R[148],E,E,28,[[["self"]],["typeid"]]],[11,R[146],E,E,28,[[]]],[11,R[143],E,E,28,[[]]],[11,"from",R[155],E,29,[[[T]],[T]]],[11,"into",E,E,29,[[],[U]]],[11,R[144],E,E,29,[[[U]],[R[20]]]],[11,R[145],E,E,29,[[],[R[20]]]],[11,R[142],E,E,29,[[["self"]],[T]]],[11,"borrow",E,E,29,[[["self"]],[T]]],[11,R[148],E,E,29,[[["self"]],["typeid"]]],[11,R[146],E,E,29,[[]]],[11,R[143],E,E,29,[[]]],[11,R[147],E,E,30,[[["self"]],[T]]],[11,R[140],E,E,30,[[[T],["self"]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,"into",E,E,30,[[],[U]]],[11,R[144],E,E,30,[[[U]],[R[20]]]],[11,R[145],E,E,30,[[],[R[20]]]],[11,R[142],E,E,30,[[["self"]],[T]]],[11,"borrow",E,E,30,[[["self"]],[T]]],[11,R[148],E,E,30,[[["self"]],["typeid"]]],[11,R[146],E,E,30,[[]]],[11,R[143],E,E,30,[[]]],[11,"from",R[156],E,31,[[[T]],[T]]],[11,"into",E,E,31,[[],[U]]],[11,R[144],E,E,31,[[[U]],[R[20]]]],[11,R[145],E,E,31,[[],[R[20]]]],[11,R[142],E,E,31,[[["self"]],[T]]],[11,"borrow",E,E,31,[[["self"]],[T]]],[11,R[148],E,E,31,[[["self"]],["typeid"]]],[11,R[146],E,E,31,[[]]],[11,R[143],E,E,31,[[]]],[11,R[147],E,E,32,[[["self"]],[T]]],[11,R[140],E,E,32,[[[T],["self"]]]],[11,"from",E,E,32,[[[T]],[T]]],[11,"into",E,E,32,[[],[U]]],[11,R[144],E,E,32,[[[U]],[R[20]]]],[11,R[145],E,E,32,[[],[R[20]]]],[11,R[142],E,E,32,[[["self"]],[T]]],[11,"borrow",E,E,32,[[["self"]],[T]]],[11,R[148],E,E,32,[[["self"]],["typeid"]]],[11,R[146],E,E,32,[[]]],[11,R[143],E,E,32,[[]]],[11,R[147],R[157],E,33,[[["self"]],[T]]],[11,R[140],E,E,33,[[[T],["self"]]]],[11,"from",E,E,33,[[[T]],[T]]],[11,"into",E,E,33,[[],[U]]],[11,R[144],E,E,33,[[[U]],[R[20]]]],[11,R[145],E,E,33,[[],[R[20]]]],[11,R[142],E,E,33,[[["self"]],[T]]],[11,"borrow",E,E,33,[[["self"]],[T]]],[11,R[148],E,E,33,[[["self"]],["typeid"]]],[11,R[146],E,E,33,[[]]],[11,R[143],E,E,33,[[]]],[11,"from",R[158],E,34,[[[T]],[T]]],[11,"into",E,E,34,[[],[U]]],[11,R[144],E,E,34,[[[U]],[R[20]]]],[11,R[145],E,E,34,[[],[R[20]]]],[11,R[142],E,E,34,[[["self"]],[T]]],[11,"borrow",E,E,34,[[["self"]],[T]]],[11,R[148],E,E,34,[[["self"]],["typeid"]]],[11,R[146],E,E,34,[[]]],[11,R[143],E,E,34,[[]]],[11,"from",R[159],E,57,[[[T]],[T]]],[11,"into",E,E,57,[[],[U]]],[11,R[144],E,E,57,[[[U]],[R[20]]]],[11,R[145],E,E,57,[[],[R[20]]]],[11,R[142],E,E,57,[[["self"]],[T]]],[11,"borrow",E,E,57,[[["self"]],[T]]],[11,R[148],E,E,57,[[["self"]],["typeid"]]],[11,R[146],E,E,57,[[]]],[11,R[143],E,E,57,[[]]],[11,"from",E,E,58,[[[T]],[T]]],[11,"into",E,E,58,[[],[U]]],[11,R[144],E,E,58,[[[U]],[R[20]]]],[11,R[145],E,E,58,[[],[R[20]]]],[11,R[142],E,E,58,[[["self"]],[T]]],[11,"borrow",E,E,58,[[["self"]],[T]]],[11,R[148],E,E,58,[[["self"]],["typeid"]]],[11,R[146],E,E,58,[[]]],[11,R[143],E,E,58,[[]]],[11,"from",E,E,59,[[[T]],[T]]],[11,"into",E,E,59,[[],[U]]],[11,R[144],E,E,59,[[[U]],[R[20]]]],[11,R[145],E,E,59,[[],[R[20]]]],[11,R[142],E,E,59,[[["self"]],[T]]],[11,"borrow",E,E,59,[[["self"]],[T]]],[11,R[148],E,E,59,[[["self"]],["typeid"]]],[11,R[146],E,E,59,[[]]],[11,R[143],E,E,59,[[]]],[11,"from",E,E,60,[[[T]],[T]]],[11,"into",E,E,60,[[],[U]]],[11,R[144],E,E,60,[[[U]],[R[20]]]],[11,R[145],E,E,60,[[],[R[20]]]],[11,R[142],E,E,60,[[["self"]],[T]]],[11,"borrow",E,E,60,[[["self"]],[T]]],[11,R[148],E,E,60,[[["self"]],["typeid"]]],[11,R[146],E,E,60,[[]]],[11,R[143],E,E,60,[[]]],[11,"from",E,E,61,[[[T]],[T]]],[11,"into",E,E,61,[[],[U]]],[11,R[144],E,E,61,[[[U]],[R[20]]]],[11,R[145],E,E,61,[[],[R[20]]]],[11,R[142],E,E,61,[[["self"]],[T]]],[11,"borrow",E,E,61,[[["self"]],[T]]],[11,R[148],E,E,61,[[["self"]],["typeid"]]],[11,R[146],E,E,61,[[]]],[11,R[143],E,E,61,[[]]],[11,"from",E,E,62,[[[T]],[T]]],[11,"into",E,E,62,[[],[U]]],[11,R[144],E,E,62,[[[U]],[R[20]]]],[11,R[145],E,E,62,[[],[R[20]]]],[11,R[142],E,E,62,[[["self"]],[T]]],[11,"borrow",E,E,62,[[["self"]],[T]]],[11,R[148],E,E,62,[[["self"]],["typeid"]]],[11,R[146],E,E,62,[[]]],[11,R[143],E,E,62,[[]]],[11,"from",E,E,63,[[[T]],[T]]],[11,"into",E,E,63,[[],[U]]],[11,R[144],E,E,63,[[[U]],[R[20]]]],[11,R[145],E,E,63,[[],[R[20]]]],[11,R[142],E,E,63,[[["self"]],[T]]],[11,"borrow",E,E,63,[[["self"]],[T]]],[11,R[148],E,E,63,[[["self"]],["typeid"]]],[11,R[146],E,E,63,[[]]],[11,R[143],E,E,63,[[]]],[11,"from",E,E,64,[[[T]],[T]]],[11,"into",E,E,64,[[],[U]]],[11,R[144],E,E,64,[[[U]],[R[20]]]],[11,R[145],E,E,64,[[],[R[20]]]],[11,R[142],E,E,64,[[["self"]],[T]]],[11,"borrow",E,E,64,[[["self"]],[T]]],[11,R[148],E,E,64,[[["self"]],["typeid"]]],[11,R[146],E,E,64,[[]]],[11,R[143],E,E,64,[[]]],[11,"from",E,E,35,[[[T]],[T]]],[11,"into",E,E,35,[[],[U]]],[11,R[144],E,E,35,[[[U]],[R[20]]]],[11,R[145],E,E,35,[[],[R[20]]]],[11,R[142],E,E,35,[[["self"]],[T]]],[11,"borrow",E,E,35,[[["self"]],[T]]],[11,R[148],E,E,35,[[["self"]],["typeid"]]],[11,R[146],E,E,35,[[]]],[11,R[143],E,E,35,[[]]],[11,"from",E,E,65,[[[T]],[T]]],[11,"into",E,E,65,[[],[U]]],[11,R[144],E,E,65,[[[U]],[R[20]]]],[11,R[145],E,E,65,[[],[R[20]]]],[11,R[142],E,E,65,[[["self"]],[T]]],[11,"borrow",E,E,65,[[["self"]],[T]]],[11,R[148],E,E,65,[[["self"]],["typeid"]]],[11,R[146],E,E,65,[[]]],[11,R[143],E,E,65,[[]]],[11,"from",E,E,66,[[[T]],[T]]],[11,"into",E,E,66,[[],[U]]],[11,R[144],E,E,66,[[[U]],[R[20]]]],[11,R[145],E,E,66,[[],[R[20]]]],[11,R[142],E,E,66,[[["self"]],[T]]],[11,"borrow",E,E,66,[[["self"]],[T]]],[11,R[148],E,E,66,[[["self"]],["typeid"]]],[11,R[146],E,E,66,[[]]],[11,R[143],E,E,66,[[]]],[11,"from",E,E,67,[[[T]],[T]]],[11,"into",E,E,67,[[],[U]]],[11,R[144],E,E,67,[[[U]],[R[20]]]],[11,R[145],E,E,67,[[],[R[20]]]],[11,R[142],E,E,67,[[["self"]],[T]]],[11,"borrow",E,E,67,[[["self"]],[T]]],[11,R[148],E,E,67,[[["self"]],["typeid"]]],[11,R[146],E,E,67,[[]]],[11,R[143],E,E,67,[[]]],[11,"from",E,E,68,[[[T]],[T]]],[11,"into",E,E,68,[[],[U]]],[11,R[144],E,E,68,[[[U]],[R[20]]]],[11,R[145],E,E,68,[[],[R[20]]]],[11,R[142],E,E,68,[[["self"]],[T]]],[11,"borrow",E,E,68,[[["self"]],[T]]],[11,R[148],E,E,68,[[["self"]],["typeid"]]],[11,R[146],E,E,68,[[]]],[11,R[143],E,E,68,[[]]],[11,"from",E,E,69,[[[T]],[T]]],[11,"into",E,E,69,[[],[U]]],[11,R[144],E,E,69,[[[U]],[R[20]]]],[11,R[145],E,E,69,[[],[R[20]]]],[11,R[142],E,E,69,[[["self"]],[T]]],[11,"borrow",E,E,69,[[["self"]],[T]]],[11,R[148],E,E,69,[[["self"]],["typeid"]]],[11,R[146],E,E,69,[[]]],[11,R[143],E,E,69,[[]]],[11,"from",E,E,70,[[[T]],[T]]],[11,"into",E,E,70,[[],[U]]],[11,R[144],E,E,70,[[[U]],[R[20]]]],[11,R[145],E,E,70,[[],[R[20]]]],[11,R[142],E,E,70,[[["self"]],[T]]],[11,"borrow",E,E,70,[[["self"]],[T]]],[11,R[148],E,E,70,[[["self"]],["typeid"]]],[11,R[146],E,E,70,[[]]],[11,R[143],E,E,70,[[]]],[11,"from",E,E,71,[[[T]],[T]]],[11,"into",E,E,71,[[],[U]]],[11,R[144],E,E,71,[[[U]],[R[20]]]],[11,R[145],E,E,71,[[],[R[20]]]],[11,R[142],E,E,71,[[["self"]],[T]]],[11,"borrow",E,E,71,[[["self"]],[T]]],[11,R[148],E,E,71,[[["self"]],["typeid"]]],[11,R[146],E,E,71,[[]]],[11,R[143],E,E,71,[[]]],[11,"from",R[160],E,36,[[[T]],[T]]],[11,"into_iter",E,E,36,[[],["i"]]],[11,"into",E,E,36,[[],[U]]],[11,R[144],E,E,36,[[[U]],[R[20]]]],[11,R[145],E,E,36,[[],[R[20]]]],[11,R[142],E,E,36,[[["self"]],[T]]],[11,"borrow",E,E,36,[[["self"]],[T]]],[11,R[148],E,E,36,[[["self"]],["typeid"]]],[11,R[146],E,E,36,[[]]],[11,R[143],E,E,36,[[]]],[11,"from",R[161],E,37,[[[T]],[T]]],[11,"into",E,E,37,[[],[U]]],[11,R[144],E,E,37,[[[U]],[R[20]]]],[11,R[145],E,E,37,[[],[R[20]]]],[11,R[142],E,E,37,[[["self"]],[T]]],[11,"borrow",E,E,37,[[["self"]],[T]]],[11,R[148],E,E,37,[[["self"]],["typeid"]]],[11,R[146],E,E,37,[[]]],[11,R[143],E,E,37,[[]]],[11,"from",E,E,38,[[[T]],[T]]],[11,"into",E,E,38,[[],[U]]],[11,R[144],E,E,38,[[[U]],[R[20]]]],[11,R[145],E,E,38,[[],[R[20]]]],[11,R[142],E,E,38,[[["self"]],[T]]],[11,"borrow",E,E,38,[[["self"]],[T]]],[11,R[148],E,E,38,[[["self"]],["typeid"]]],[11,R[146],E,E,38,[[]]],[11,R[143],E,E,38,[[]]],[11,"from",R[108],E,39,[[[T]],[T]]],[11,"into",E,E,39,[[],[U]]],[11,R[144],E,E,39,[[[U]],[R[20]]]],[11,R[145],E,E,39,[[],[R[20]]]],[11,R[142],E,E,39,[[["self"]],[T]]],[11,"borrow",E,E,39,[[["self"]],[T]]],[11,R[148],E,E,39,[[["self"]],["typeid"]]],[11,R[146],E,E,39,[[]]],[11,R[143],E,E,39,[[]]],[11,R[147],E,E,40,[[["self"]],[T]]],[11,R[140],E,E,40,[[[T],["self"]]]],[11,"from",E,E,40,[[[T]],[T]]],[11,"into",E,E,40,[[],[U]]],[11,R[144],E,E,40,[[[U]],[R[20]]]],[11,R[145],E,E,40,[[],[R[20]]]],[11,R[142],E,E,40,[[["self"]],[T]]],[11,"borrow",E,E,40,[[["self"]],[T]]],[11,R[148],E,E,40,[[["self"]],["typeid"]]],[11,R[146],E,E,40,[[]]],[11,R[143],E,E,40,[[]]],[11,R[147],E,E,41,[[["self"]],[T]]],[11,R[140],E,E,41,[[[T],["self"]]]],[11,"from",E,E,41,[[[T]],[T]]],[11,"into",E,E,41,[[],[U]]],[11,R[144],E,E,41,[[[U]],[R[20]]]],[11,R[145],E,E,41,[[],[R[20]]]],[11,R[142],E,E,41,[[["self"]],[T]]],[11,"borrow",E,E,41,[[["self"]],[T]]],[11,R[148],E,E,41,[[["self"]],["typeid"]]],[11,R[146],E,E,41,[[]]],[11,R[143],E,E,41,[[]]],[11,"from",R[162],E,42,[[[T]],[T]]],[11,"into",E,E,42,[[],[U]]],[11,R[144],E,E,42,[[[U]],[R[20]]]],[11,R[145],E,E,42,[[],[R[20]]]],[11,R[142],E,E,42,[[["self"]],[T]]],[11,"borrow",E,E,42,[[["self"]],[T]]],[11,R[148],E,E,42,[[["self"]],["typeid"]]],[11,R[146],E,E,42,[[]]],[11,R[143],E,E,42,[[]]],[11,"from",R[163],E,43,[[[T]],[T]]],[11,"into",E,E,43,[[],[U]]],[11,R[144],E,E,43,[[[U]],[R[20]]]],[11,R[145],E,E,43,[[],[R[20]]]],[11,R[142],E,E,43,[[["self"]],[T]]],[11,"borrow",E,E,43,[[["self"]],[T]]],[11,R[148],E,E,43,[[["self"]],["typeid"]]],[11,R[146],E,E,43,[[]]],[11,R[143],E,E,43,[[]]],[11,"from",R[164],E,44,[[[T]],[T]]],[11,"into",E,E,44,[[],[U]]],[11,R[144],E,E,44,[[[U]],[R[20]]]],[11,R[145],E,E,44,[[],[R[20]]]],[11,R[142],E,E,44,[[["self"]],[T]]],[11,"borrow",E,E,44,[[["self"]],[T]]],[11,R[148],E,E,44,[[["self"]],["typeid"]]],[11,R[146],E,E,44,[[]]],[11,R[143],E,E,44,[[]]],[11,"from",E,E,45,[[[T]],[T]]],[11,"into",E,E,45,[[],[U]]],[11,R[144],E,E,45,[[[U]],[R[20]]]],[11,R[145],E,E,45,[[],[R[20]]]],[11,R[142],E,E,45,[[["self"]],[T]]],[11,"borrow",E,E,45,[[["self"]],[T]]],[11,R[148],E,E,45,[[["self"]],["typeid"]]],[11,R[146],E,E,45,[[]]],[11,R[143],E,E,45,[[]]],[11,R[147],R[165],E,46,[[["self"]],[T]]],[11,R[140],E,E,46,[[[T],["self"]]]],[11,"from",E,E,46,[[[T]],[T]]],[11,"into",E,E,46,[[],[U]]],[11,R[144],E,E,46,[[[U]],[R[20]]]],[11,R[145],E,E,46,[[],[R[20]]]],[11,R[142],E,E,46,[[["self"]],[T]]],[11,"borrow",E,E,46,[[["self"]],[T]]],[11,R[148],E,E,46,[[["self"]],["typeid"]]],[11,R[146],E,E,46,[[]]],[11,R[143],E,E,46,[[]]],[11,"from",E,E,47,[[[T]],[T]]],[11,"into",E,E,47,[[],[U]]],[11,R[144],E,E,47,[[[U]],[R[20]]]],[11,R[145],E,E,47,[[],[R[20]]]],[11,R[142],E,E,47,[[["self"]],[T]]],[11,"borrow",E,E,47,[[["self"]],[T]]],[11,R[148],E,E,47,[[["self"]],["typeid"]]],[11,R[146],E,E,47,[[]]],[11,R[143],E,E,47,[[]]],[11,R[147],E,E,48,[[["self"]],[T]]],[11,R[140],E,E,48,[[[T],["self"]]]],[11,"from",E,E,48,[[[T]],[T]]],[11,"into",E,E,48,[[],[U]]],[11,R[144],E,E,48,[[[U]],[R[20]]]],[11,R[145],E,E,48,[[],[R[20]]]],[11,R[142],E,E,48,[[["self"]],[T]]],[11,"borrow",E,E,48,[[["self"]],[T]]],[11,R[148],E,E,48,[[["self"]],["typeid"]]],[11,R[146],E,E,48,[[]]],[11,R[143],E,E,48,[[]]],[11,R[147],E,E,49,[[["self"]],[T]]],[11,R[140],E,E,49,[[[T],["self"]]]],[11,"from",E,E,49,[[[T]],[T]]],[11,"into",E,E,49,[[],[U]]],[11,R[144],E,E,49,[[[U]],[R[20]]]],[11,R[145],E,E,49,[[],[R[20]]]],[11,R[142],E,E,49,[[["self"]],[T]]],[11,"borrow",E,E,49,[[["self"]],[T]]],[11,R[148],E,E,49,[[["self"]],["typeid"]]],[11,R[146],E,E,49,[[]]],[11,R[143],E,E,49,[[]]],[11,R[147],R[166],E,50,[[["self"]],[T]]],[11,R[140],E,E,50,[[[T],["self"]]]],[11,"from",E,E,50,[[[T]],[T]]],[11,"into",E,E,50,[[],[U]]],[11,R[144],E,E,50,[[[U]],[R[20]]]],[11,R[145],E,E,50,[[],[R[20]]]],[11,R[142],E,E,50,[[["self"]],[T]]],[11,"borrow",E,E,50,[[["self"]],[T]]],[11,R[148],E,E,50,[[["self"]],["typeid"]]],[11,R[146],E,E,50,[[]]],[11,R[143],E,E,50,[[]]],[11,"from",E,E,51,[[[T]],[T]]],[11,"into",E,E,51,[[],[U]]],[11,R[144],E,E,51,[[[U]],[R[20]]]],[11,R[145],E,E,51,[[],[R[20]]]],[11,R[142],E,E,51,[[["self"]],[T]]],[11,"borrow",E,E,51,[[["self"]],[T]]],[11,R[148],E,E,51,[[["self"]],["typeid"]]],[11,R[146],E,E,51,[[]]],[11,R[143],E,E,51,[[]]],[11,"from",R[167],E,52,[[[T]],[T]]],[11,"into",E,E,52,[[],[U]]],[11,R[144],E,E,52,[[[U]],[R[20]]]],[11,R[145],E,E,52,[[],[R[20]]]],[11,R[142],E,E,52,[[["self"]],[T]]],[11,"borrow",E,E,52,[[["self"]],[T]]],[11,R[148],E,E,52,[[["self"]],["typeid"]]],[11,R[146],E,E,52,[[]]],[11,R[143],E,E,52,[[]]],[11,"from",R[168],E,53,[[[T]],[T]]],[11,"into",E,E,53,[[],[U]]],[11,R[144],E,E,53,[[[U]],[R[20]]]],[11,R[145],E,E,53,[[],[R[20]]]],[11,R[142],E,E,53,[[["self"]],[T]]],[11,"borrow",E,E,53,[[["self"]],[T]]],[11,R[148],E,E,53,[[["self"]],["typeid"]]],[11,R[146],E,E,53,[[]]],[11,R[143],E,E,53,[[]]],[11,"from",R[169],E,54,[[[T]],[T]]],[11,"into",E,E,54,[[],[U]]],[11,R[144],E,E,54,[[[U]],[R[20]]]],[11,R[145],E,E,54,[[],[R[20]]]],[11,R[142],E,E,54,[[["self"]],[T]]],[11,"borrow",E,E,54,[[["self"]],[T]]],[11,R[148],E,E,54,[[["self"]],["typeid"]]],[11,R[146],E,E,54,[[]]],[11,R[143],E,E,54,[[]]],[11,R[147],E,E,55,[[["self"]],[T]]],[11,R[140],E,E,55,[[[T],["self"]]]],[11,"from",E,E,55,[[[T]],[T]]],[11,"into",E,E,55,[[],[U]]],[11,R[144],E,E,55,[[[U]],[R[20]]]],[11,R[145],E,E,55,[[],[R[20]]]],[11,R[142],E,E,55,[[["self"]],[T]]],[11,"borrow",E,E,55,[[["self"]],[T]]],[11,R[148],E,E,55,[[["self"]],["typeid"]]],[11,R[146],E,E,55,[[]]],[11,R[143],E,E,55,[[]]],[11,"from",R[170],E,56,[[[T]],[T]]],[11,"into",E,E,56,[[],[U]]],[11,R[144],E,E,56,[[[U]],[R[20]]]],[11,R[145],E,E,56,[[],[R[20]]]],[11,R[142],E,E,56,[[["self"]],[T]]],[11,"borrow",E,E,56,[[["self"]],[T]]],[11,R[148],E,E,56,[[["self"]],["typeid"]]],[11,R[146],E,E,56,[[]]],[11,R[143],E,E,56,[[]]],[11,R[22],R[9],E,2,[[["self"],[R[23]]],[["error"],[R[20],["error"]]]]],[11,"drop",E,E,2,[[["self"]]]],[11,"drop",R[46],E,20,[[["self"]]]],[11,"next",R[160],E,36,[[["self"]],[["var"],["option",["var"]]]]],[11,"eq",R[139],E,0,[[["self"],["var"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["var"]],["bool"]]],[11,"eq",E,E,1,[[["self"],["lit"]],["bool"]]],[11,"ne",E,E,1,[[["self"],["lit"]],["bool"]]],[11,"eq",R[9],E,11,[[[R[176]],["self"]],["bool"]]],[11,"eq",E,E,12,[[["self"],[R[177]]],["bool"]]],[11,"eq",R[149],E,14,[[[R[25]],["self"]],["bool"]]],[11,"eq",R[155],E,30,[[[R[70]],["self"]],["bool"]]],[11,"ne",E,E,30,[[[R[70]],["self"]],["bool"]]],[11,"eq",R[156],E,32,[[["self"],["tier"]],["bool"]]],[11,"eq",R[46],E,21,[[["self"],[R[124]]],["bool"]]],[11,"eq",R[108],E,40,[[["self"],[R[171]]],["bool"]]],[11,"eq",R[165],E,48,[[["self"],["reason"]],["bool"]]],[11,"ne",E,E,48,[[["self"],["reason"]],["bool"]]],[11,"eq",E,E,49,[[["self"],[R[127]]],["bool"]]],[11,"ne",E,E,49,[[["self"],[R[127]]],["bool"]]],[11,"eq",R[169],E,55,[[["self"],[R[178]]],["bool"]]],[11,R[172],R[9],E,7,[[],["checker"]]],[11,R[172],R[149],E,14,[[],[R[25]]]],[11,R[172],R[150],E,15,[[],["self"]]],[11,R[172],E,E,16,[[],[R[38]]]],[11,R[172],R[40],E,18,[[],[R[42]]]],[11,R[172],R[46],E,20,[[],["solver"]]],[11,R[172],R[151],E,23,[[],["analyzeconflict"]]],[11,R[172],E,E,24,[[],["levelabstraction"]]],[11,R[172],R[152],E,25,[[],["binaryclauses"]]],[11,R[172],R[154],E,28,[[],["clauseactivity"]]],[11,R[172],R[155],E,29,[[],[R[69]]]],[11,R[172],R[156],E,31,[[],["clausedb"]]],[11,R[172],R[157],E,33,[[],[R[71]]]],[11,R[172],R[159],E,57,[[],["analyzeconflictp"]]],[11,R[172],E,E,58,[[],[R[61]]]],[11,R[172],E,E,59,[[],[R[132]]]],[11,R[172],E,E,60,[[],[R[173]]]],[11,R[172],E,E,61,[[],[R[67]]]],[11,R[172],E,E,62,[[],[R[66]]]],[11,R[172],E,E,63,[[],[R[72]]]],[11,R[172],E,E,64,[[],[R[129]]]],[11,R[172],E,E,35,[[],["proofp"]]],[11,R[172],E,E,65,[[],["schedulep"]]],[11,R[172],E,E,66,[[],[R[85]]]],[11,R[172],E,E,67,[[],[R[117]]]],[11,R[172],E,E,68,[[],[R[73]]]],[11,R[172],E,E,69,[[],[R[56]]]],[11,R[172],E,E,70,[[],[R[86]]]],[11,R[172],E,E,71,[[],[R[63]]]],[11,R[172],R[158],E,34,[[],["context"]]],[11,R[172],R[160],E,36,[[],["vsids"]]],[11,R[172],R[161],E,37,[[],[R[97]]]],[11,R[172],R[162],E,42,[[],["mapstep"]]],[11,R[172],R[163],E,43,[[],["parser"]]],[11,R[172],R[108],E,39,[[],["proof"]]],[11,R[172],R[164],E,44,[[],[R[84]]]],[11,R[172],E,E,45,[[],["trail"]]],[11,R[172],R[165],E,47,[[],["implgraph"]]],[11,R[172],R[166],E,51,[[],[R[174]]]],[11,R[172],R[168],E,53,[[],["lubysequence"]]],[11,R[172],R[167],E,52,[[],[R[175]]]],[11,R[172],R[169],E,55,[[],[R[178]]]],[11,R[172],E,E,54,[[],["solverstate"]]],[11,R[172],R[170],E,56,[[],["tmpdata"]]],[11,"clone",R[139],E,0,[[["self"]],["var"]]],[11,"clone",E,E,1,[[["self"]],["lit"]]],[11,"clone",R[9],E,10,[[["self"]],["unitid"]]],[11,"clone",E,E,5,[[["self"]],["unitclause"]]],[11,"clone",E,E,11,[[["self"]],[R[176]]]],[11,"clone",E,E,12,[[["self"]],[R[177]]]],[11,"clone",R[40],E,17,[[["self"]],[R[44]]]],[11,"clone",R[155],E,30,[[["self"]],[R[70]]]],[11,"clone",R[156],E,32,[[["self"]],["tier"]]],[11,"clone",R[157],E,33,[[["self"]],[R[71]]]],[11,"clone",R[46],E,21,[[["self"]],[R[124]]]],[11,"clone",R[108],E,40,[[["self"]],[R[171]]]],[11,"clone",E,E,41,[[["self"]],[R[118]]]],[11,"clone",R[165],E,48,[[["self"]],["reason"]]],[11,"clone",E,E,49,[[["self"]],[R[127]]]],[11,"clone",E,E,46,[[["self"]],["implnode"]]],[11,"clone",R[166],E,50,[[["self"]],["watch"]]],[11,"clone",R[169],E,55,[[["self"]],[R[178]]]],[11,"cmp",R[139],E,0,[[["self"],["var"]],[R[179]]]],[11,"cmp",E,E,1,[[["self"],["lit"]],[R[179]]]],[11,"cmp",R[155],E,30,[[[R[70]],["self"]],[R[179]]]],[11,"from",R[149],E,14,[[["f"]],[R[25]]]],[11,"from",R[153],E,26,[[[R[127]]],[R[64]]]],[11,R[180],R[139],E,0,[[["self"]]]],[11,R[180],E,E,1,[[["self"]]]],[11,R[180],R[9],E,11,[[["self"]]]],[11,R[180],E,E,12,[[["self"]]]],[11,R[180],R[149],E,14,[[["self"]]]],[11,R[180],R[155],E,30,[[["self"]]]],[11,R[180],R[156],E,32,[[["self"]]]],[11,R[180],R[46],E,21,[[["self"]]]],[11,R[180],R[108],E,40,[[["self"]]]],[11,R[180],R[165],E,48,[[["self"]]]],[11,R[180],E,E,49,[[["self"]]]],[11,R[180],R[169],E,55,[[["self"]]]],[11,R[181],R[139],E,0,[[["self"],["var"]],[[R[179]],["option",[R[179]]]]]],[11,"lt",E,E,0,[[["self"],["var"]],["bool"]]],[11,"le",E,E,0,[[["self"],["var"]],["bool"]]],[11,"gt",E,E,0,[[["self"],["var"]],["bool"]]],[11,"ge",E,E,0,[[["self"],["var"]],["bool"]]],[11,R[181],E,E,1,[[["self"],["lit"]],[[R[179]],["option",[R[179]]]]]],[11,"lt",E,E,1,[[["self"],["lit"]],["bool"]]],[11,"le",E,E,1,[[["self"],["lit"]],["bool"]]],[11,"gt",E,E,1,[[["self"],["lit"]],["bool"]]],[11,"ge",E,E,1,[[["self"],["lit"]],["bool"]]],[11,R[181],R[155],E,30,[[[R[70]],["self"]],[[R[179]],["option",[R[179]]]]]],[11,"lt",E,E,30,[[[R[70]],["self"]],["bool"]]],[11,"le",E,E,30,[[[R[70]],["self"]],["bool"]]],[11,"gt",E,E,30,[[[R[70]],["self"]],["bool"]]],[11,"ge",E,E,30,[[[R[70]],["self"]],["bool"]]],[11,"fmt",R[139],E,0,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",E,E,1,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",R[9],E,8,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",R[40],E,19,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",R[46],E,22,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",R[139],E,0,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",E,E,1,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",R[9],E,8,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",E,E,9,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",E,E,10,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",E,E,5,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",R[149],E,14,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",R[40],E,19,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",E,E,17,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",R[46],E,22,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",R[155],E,30,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",R[156],E,32,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",R[46],E,21,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",R[108],E,40,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",E,E,41,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",R[165],E,48,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",E,E,49,[[["self"],[R[182]]],[R[20]]]],[11,"fmt",R[169],E,55,[[["self"],[R[182]]],[R[20]]]],[11,"not",R[139],E,1,[[],["lit"]]],[11,"bitor",R[159],E,57,[[[R[183]]]]],[11,"bitor",E,E,58,[[[R[183]]]]],[11,"bitor",E,E,59,[[[R[183]]]]],[11,"bitor",E,E,60,[[[R[183]]]]],[11,"bitor",E,E,61,[[[R[183]]]]],[11,"bitor",E,E,62,[[[R[183]]]]],[11,"bitor",E,E,63,[[[R[183]]]]],[11,"bitor",E,E,64,[[[R[183]]]]],[11,"bitor",E,E,35,[[[R[183]]]]],[11,"bitor",E,E,65,[[[R[183]]]]],[11,"bitor",E,E,66,[[[R[183]]]]],[11,"bitor",E,E,67,[[[R[183]]]]],[11,"bitor",E,E,68,[[[R[183]]]]],[11,"bitor",E,E,69,[[[R[183]]]]],[11,"bitor",E,E,70,[[[R[183]]]]],[11,"bitor",E,E,71,[[[R[183]]]]],[11,"bitxor",R[139],E,1,[[["bool"]],["lit"]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"hash",E,E,1,[[["self"],["__h"]]]],[11,R[184],E,E,0,[[["self"],["__s"]],[R[20]]]],[11,R[184],E,E,1,[[["self"],["__s"]],[R[20]]]],[11,R[184],R[150],E,16,[[["self"],["__s"]],[R[20]]]],[11,R[185],R[139],E,0,[[["__d"]],[R[20]]]],[11,R[185],E,E,1,[[["__d"]],[R[20]]]],[11,R[185],R[150],E,16,[[["__d"]],[R[20]]]],[11,"name",R[9],E,8,[[["self"]],[["option",["str"]],["str"]]]],[11,"cause",E,E,8,[[["self"]],[["option",["fail"]],["fail"]]]],[11,R[186],E,E,8,[[["self"]],[["option",[R[186]]],[R[186]]]]],[11,"name",R[40],E,19,[[["self"]],[["option",["str"]],["str"]]]],[11,"cause",E,E,19,[[["self"]],[["option",["fail"]],["fail"]]]],[11,R[186],E,E,19,[[["self"]],[["option",[R[186]]],[R[186]]]]],[11,"name",R[46],E,22,[[["self"]],[["option",["str"]],["str"]]]],[11,"cause",E,E,22,[[["self"]],[["option",["fail"]],["fail"]]]],[11,R[186],E,E,22,[[["self"]],[["option",[R[186]]],[R[186]]]]],[11,R[146],R[158],E,34,[[]]],[11,R[143],E,E,34,[[]]],[11,R[146],E,E,34,[[]]],[11,R[143],E,E,34,[[]]],[11,R[146],E,E,34,[[]]],[11,R[143],E,E,34,[[]]],[11,R[146],E,E,34,[[]]],[11,R[143],E,E,34,[[]]],[11,R[146],E,E,34,[[]]],[11,R[143],E,E,34,[[]]],[11,R[146],E,E,34,[[]]],[11,R[143],E,E,34,[[]]],[11,R[146],E,E,34,[[]]],[11,R[143],E,E,34,[[]]],[11,R[146],E,E,34,[[]]],[11,R[143],E,E,34,[[]]],[11,R[146],E,E,34,[[]]],[11,R[143],E,E,34,[[]]],[11,R[146],E,E,34,[[]]],[11,R[143],E,E,34,[[]]],[11,R[146],E,E,34,[[]]],[11,R[143],E,E,34,[[]]],[11,R[146],E,E,34,[[]]],[11,R[143],E,E,34,[[]]],[11,R[146],E,E,34,[[]]],[11,R[143],E,E,34,[[]]],[11,R[146],E,E,34,[[]]],[11,R[143],E,E,34,[[]]],[11,R[146],E,E,34,[[]]],[11,R[143],E,E,34,[[]]],[11,R[146],E,E,34,[[]]],[11,R[143],E,E,34,[[]]]],"p":[[3,"Var"],[3,"Lit"],[3,R[16]],[3,R[187]],[3,"Clause"],[3,R[188]],[3,R[189]],[3,"Checker"],[4,R[190]],[4,R[191]],[4,"UnitId"],[4,R[192]],[4,R[193]],[8,R[194]],[3,R[195]],[3,R[196]],[3,R[197]],[3,R[198]],[3,R[199]],[4,R[200]],[3,"Solver"],[4,R[104]],[4,R[201]],[3,R[202]],[3,R[203]],[3,R[204]],[4,R[205]],[3,"Clause"],[3,R[206]],[3,R[207]],[3,R[208]],[3,"ClauseDb"],[4,"Tier"],[3,R[209]],[3,"Context"],[3,"ProofP"],[3,"Vsids"],[3,R[210]],[4,R[211]],[3,"Proof"],[4,R[212]],[4,R[213]],[3,"MapStep"],[3,"Parser"],[3,R[214]],[3,"Trail"],[3,"ImplNode"],[3,R[215]],[4,"Reason"],[4,R[99]],[3,"Watch"],[3,R[216]],[3,"Schedule"],[3,R[217]],[3,R[218]],[4,"SatState"],[3,"TmpData"],[3,R[219]],[3,R[220]],[3,R[221]],[3,R[222]],[3,R[223]],[3,R[224]],[3,R[225]],[3,R[226]],[3,R[227]],[3,R[228]],[3,R[229]],[3,"TmpDataP"],[3,"TrailP"],[3,"VsidsP"],[3,R[230]]]};
searchIndex["varisat_macros"]={"doc":E,"i":[[5,"doc_from_attrs","varisat_macros","Get the doc comment as LitStr from the attributes",N,[[],[[R[0]],["vec",[R[0]]]]]],[5,"get_doc_field",E,"Find a field inside the doc comment",N,[[["str"]],[["option",[R[0]]],[R[0]]]]],[5,"derive_doc_default",E,"Derives a default instance from the documentation.",N,[[[R[1]]],[R[2]]]],[5,"derive_config_update",E,"Derives an update struct and method for a config struct.",N,[[[R[1]]],[R[2]]]],[24,"DocDefault",E,E,N,N],[24,"ConfigUpdate",E,E,N,N]],"p":[]};
initSearch(searchIndex);addSearchOptions(searchIndex);